{"version":3,"sources":["utils/Constants.js","single/Single.js","main/Main.js","App.js","index.js"],"names":["summaryLink","TW","NYSE","NASDAQ","HKG","appScriptURL","singleStockColumns","title","dataIndex","key","align","width","fixed","render","text","row","index","style","textAlign","action","color","currentDate","Date","current","date","predict","message","currentSpeed","currentSpeedPct","middleDate","middle","predictDate","currentPriceDiff","price","currentDateDiffMillis","currentDateDiff","Math","round","expectSpeed","expectSpeedPct","expectPriceDiff","expectDateDiffMillis","expectDateDiff","sorter","a","b","aMiddleDate","bMiddleDate","aPredictDate","bPredictDate","aCurrentPriceDiff","aCurrentDateDiffMillis","aCurrentDateDiff","aCurrentSpeedPct","aExpectPriceDiff","aExpectDateDiffMillis","aExpectDateDiff","aExpectSpeedPct","aSpeedPct","min","bCurrentPriceDiff","bCurrentDateDiffMillis","bDateDiff","bCurrentSpeedPct","bExpectPriceDiff","bExpectDateDiffMillis","bExpectDateDiff","bExpectSpeedPct","bSpeedPct","gain","percentage","start","difference","points","defaultSortOrder","tabName","new","hold","alert","temp","Single","useParams","country","symbol","useState","header","setHeader","dataSource","setDataSource","error","setError","finishFetching","setFinishFetching","toUpperCase","fetchData","axios","url","params","mode","then","res","data","console","log","document","profile","fullName","accuracy","success","total","old","yahooLink","symbolTitle","count","onChange","onFavoriteChange","href","target","rel","icon","faExternalLinkAlt","toLocaleDateString","Item","label","useEffect","value","rawFavorite","localStorage","getItem","favorite","JSON","parse","exchangeList","symbolIndex","indexOf","splice","push","setItem","stringify","Object","keys","length","active","columns","size","pagination","defaultPageSize","scroll","x","oldStockColumns","sortDirections","buy","sell","Main","stockData","activeTab","setActiveTab","tabPanes","setTabPanes","TabPane","Tabs","exchangesToCountry","TPE","tabs","exchanges","subTabs","notFetched","exchangesAllData","categories","firstData","category","categoryData","stock","subDataSource","changeSubTab","subTab","defaultActiveKey","exchange","map","tab","index2","margin","bordered","hideOnSinglePage","expandable","expandedRowRender","expandRowByClick","indentSize","expandIconColumnIndex","record","i","processing","ellipsis","allData","differencePoint","differencePct","actionStyle","to","padEnd","localeCompare","maxSpeed","maxSpeedPct","speedPct","speed","aAllData","aMaxSpeedPct","priceDiff","dateDiffMillis","dateDiff","bAllData","bMaxSpeedPct","minPct","max","maxPct","pct","pctToDouble","parseFloat","substring","aMin","aMax","bMax","minDate","maxDate","Header","Option","Select","options","setOptions","fetchStockList","xs","sm","md","lg","xl","xxl","paddingTop","showSearch","defaultActiveFirstOption","showArrow","filterOption","input","option","toLowerCase","filterSort","optionA","optionB","symbolCompare","onSelect","window","location","notFoundContent","placeholder","maxWidth","App","stockDataInitial","setStockData","mainLastActiveTab","setMainLastActiveTab","get","html","viewport","querySelector","id","childNodes","innerText","tableBody","tr","j","td","decode","parsedText","s","catch","err","padding","exact","path","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.58444b10.chunk.js","sourcesContent":["export const summaryLink = {\n  TW:\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTICqnaz9FpFBdfQtoM4yhfWVudIxvBgp5s6EolSVN-RRq2wD4dPz3yWIH-5D29QBx-krn71isP4Lmn/pubhtml\",\n  NYSE:\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTFJ5ulGKfVIGPvKG_QL5Tr2CkV4Qjjm4jQb5LmIwQ-obbUao7SYDCBlO5qtF2VuznRuWY1pejrTB8j/pubhtml\",\n  NASDAQ:\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSzS1M2eoYGYH-g7Y_u1SCvcwTiAo4CxCjVwkGQzQpz7aQEY7aK3Wow47tpirw6mgKA384CKXU_QlWS/pubhtml\",\n  HKG:\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTLf9h7gj6CAlqRPAdwuWNvLBNmDzH1SJVexVAoZi_QRkaTDXIaUOK1NUKH-kQIAgl8twlvZjri_hL3/pubhtml\",\n};\n\nexport const appScriptURL =\n  \"https://script.google.com/a/uw.edu/macros/s/AKfycbzdeg0uAW8TFykGSnDPjMxYhAayyAfcQEnuByZm7ykEKiXJbdk/exec\";\n\nexport const MODE = {\n  color: [\n    {\n      rise: \"red\",\n      fall: \"green\",\n    },\n    { rise: \"green\", fall: \"red\" },\n  ],\n};\n\nexport const singleStockColumns = [\n  // {\n  //   title: \"買價\",\n  //   dataIndex: \"buy\",\n  //   key: \"buy\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span>{row.buy.price}</span>\n  //         <br />\n  //         <small>{row.buy.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"行為\",\n    dataIndex: \"action\",\n    key: \"action\",\n    align: \"right\",\n    width: 100,\n    fixed: \"left\",\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      let action = text;\n      if (text === \"買\") {\n        style.color = \"red\";\n      } else if (text === \"賣\") {\n        style.color = \"green\";\n      }\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          {action}\n          <br />\n          {row.message}\n        </p>\n      );\n    },\n  },\n  {\n    title: \"漲速(週)\",\n    dataIndex: \"speed\",\n    key: \"speed\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const middleDate = new Date(row.middle.date);\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n\n      const currentPriceDiff = row.current.price - row.middle.price;\n      const currentDateDiffMillis = currentDate - middleDate;\n      const currentDateDiff = currentDateDiffMillis / (1000 * 60 * 60 * 24);\n      let currentSpeed, currentSpeedPct;\n      if (currentDateDiff <= 0) {\n        currentSpeed = 0;\n        currentSpeedPct = 0;\n      } else {\n        currentSpeed =\n          Math.round((currentPriceDiff / ((currentDateDiff / 7) * 5)) * 100) /\n          100;\n        currentSpeedPct =\n          Math.round((currentSpeed / currentDateDiff) * 10000) / 100;\n      }\n\n      const expectPriceDiff = row.predict.price - row.middle.price;\n      const expectDateDiffMillis = predictDate - middleDate;\n      const expectDateDiff = expectDateDiffMillis / (1000 * 60 * 60 * 24);\n      let expectSpeed, expectSpeedPct;\n      if (expectDateDiff <= 0) {\n        expectSpeed = 0;\n        expectSpeedPct = 0;\n      } else {\n        expectSpeed =\n          Math.round((expectPriceDiff / ((expectDateDiff / 7) * 5)) * 100) /\n          100;\n        expectSpeedPct =\n          Math.round((expectSpeed / expectDateDiff) * 10000) / 100;\n      }\n\n      let style = { textAlign: \"right\" };\n\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n\n      return (\n        <p style={style}>\n          {currentDateDiffMillis / expectDateDiffMillis >= 0.05 ? (\n            <>\n              實際: {currentSpeedPct}% <small>({currentSpeed})</small>\n              <br />\n            </>\n          ) : null}\n          預期: {expectSpeedPct}% <small>({expectSpeed})</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => {\n      const currentDate = new Date(a.current.date);\n      const aMiddleDate = new Date(a.middle.date);\n      const bMiddleDate = new Date(b.middle.date);\n      const aPredictDate = new Date(a.predict.date);\n      const bPredictDate = new Date(b.predict.date);\n\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\n        return aPredictDate - bPredictDate;\n      } else if (aPredictDate <= currentDate) {\n        return -1;\n      } else if (bPredictDate <= currentDate) {\n        return 1;\n      }\n\n      const aCurrentPriceDiff = a.current.price - a.middle.price;\n      const aCurrentDateDiffMillis = currentDate - aMiddleDate;\n      const aCurrentDateDiff = aCurrentDateDiffMillis / (1000 * 60 * 60 * 24);\n      const aCurrentSpeed =\n        Math.round((aCurrentPriceDiff / ((aCurrentDateDiff / 7) * 5)) * 100) /\n        100;\n      const aCurrentSpeedPct = aCurrentSpeed / aCurrentDateDiff;\n\n      const aExpectPriceDiff = a.predict.price - a.middle.price;\n      const aExpectDateDiffMillis = aPredictDate - aMiddleDate;\n      const aExpectDateDiff = aExpectDateDiffMillis / (1000 * 60 * 60 * 24);\n      const aExpectSpeed =\n        Math.round((aExpectPriceDiff / ((aExpectDateDiff / 7) * 5)) * 100) /\n        100;\n      const aExpectSpeedPct = aExpectSpeed / aExpectDateDiff;\n\n      let aSpeedPct = aExpectSpeedPct;\n\n      if (aCurrentDateDiffMillis / aExpectDateDiffMillis >= 0.1) {\n        aSpeedPct = Math.min(aCurrentSpeedPct, aExpectSpeedPct);\n      }\n\n      const bCurrentPriceDiff = b.current.price - b.middle.price;\n      const bCurrentDateDiffMillis = currentDate - bMiddleDate;\n      const bDateDiff = bCurrentDateDiffMillis / (1000 * 60 * 60 * 24);\n      const bCurrentSpeed =\n        Math.round((bCurrentPriceDiff / ((bDateDiff / 7) * 5)) * 100) / 100;\n      const bCurrentSpeedPct = bCurrentSpeed / bDateDiff;\n\n      const bExpectPriceDiff = b.predict.price - b.middle.price;\n      const bExpectDateDiffMillis = bPredictDate - bMiddleDate;\n      const bExpectDateDiff = bExpectDateDiffMillis / (1000 * 60 * 60 * 24);\n      const bExpectSpeed =\n        Math.round((bExpectPriceDiff / ((bExpectDateDiff / 7) * 5)) * 100) /\n        100;\n      const bExpectSpeedPct = bExpectSpeed / bExpectDateDiff;\n\n      let bSpeedPct = bExpectSpeedPct;\n\n      if (bCurrentDateDiffMillis / bExpectDateDiffMillis >= 0.1) {\n        bSpeedPct = Math.min(bCurrentSpeedPct, bExpectSpeedPct);\n      }\n\n      return aSpeedPct - bSpeedPct;\n    },\n  },\n  {\n    title: \"獲利空間\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n\n      return (\n        <p style={style}>\n          <span>{row.gain.price}</span>\n          <br />\n          <small>{row.gain.percentage}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => {\n      const currentDate = new Date(a.current.date);\n      const aPredictDate = new Date(a.predict.date);\n      const bPredictDate = new Date(b.predict.date);\n\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\n        return aPredictDate - bPredictDate;\n      } else if (aPredictDate <= currentDate) {\n        return -1;\n      } else if (bPredictDate <= currentDate) {\n        return 1;\n      }\n      return a.gain.price - b.gain.price;\n    },\n  },\n  {\n    title: \"起漲點\",\n    dataIndex: \"start\",\n    key: \"start\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          <span>{row.start.price}</span>\n          <br />\n          <small>{row.start.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"中間值\",\n    dataIndex: \"middle\",\n    key: \"middle\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          <span>{row.middle.price}</span>\n          <br />\n          <small>\n            ({row.middle.difference.points}, {row.middle.difference.percentage}\n            %)\n          </small>\n          <br />\n          <small>{row.middle.date}</small>\n        </p>\n      );\n    },\n  },\n  // {\n  //   title: \"現價\",\n  //   dataIndex: \"currentPrice\",\n  //   key: \"currentPrice\",\n  //   align: \"right\",\n  //   width: 100,\n  //   render: (text, row, index) => {\n  //     let style = {};\n  //     if (row.current.difference.points < 0) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span style={style}>{row.current.price}</span>\n  //         <br />\n  //         <span>{row.current.difference.percentage}%</span>\n  //         <br />\n  //         <small>{row.current.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"現在獲利\",\n  //   dataIndex: \"currentGain\",\n  //   key: \"currentGain\",\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     if (row.current.price < row.buy.price) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={style}>\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n  //         <br />\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    defaultSortOrder: \"ascend\",\n    render: (text, row, index) => {\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      let style = {};\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n\n      return (\n        <p style={style}>\n          <span>{row.predict.price}</span>\n          <br />\n          <small>{row.predict.date}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.predict.price - b.predict.price,\n  },\n];\n\nexport const tabName = {\n  new: \"今日新增\",\n  hold: \"持有\",\n  alert: \"警戒\",\n  temp: \"觀察\",\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Rate, Table, Descriptions, Skeleton } from \"antd\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { singleStockColumns } from \"../utils/Constants\";\nimport { useParams } from \"react-router-dom\";\nimport { appScriptURL } from \"../utils/Constants\";\n\nexport default function Single() {\n  let { country, symbol } = useParams();\n  const [header, setHeader] = useState(<></>);\n  const [dataSource, setDataSource] = useState({});\n  const [error, setError] = useState({});\n  const [finishFetching, setFinishFetching] = useState(false);\n\n  country = country.toUpperCase();\n  symbol = symbol.toUpperCase();\n\n  const fetchData = async () => {\n    try {\n      setFinishFetching(false);\n      setError({});\n      const data = await axios({\n        url: appScriptURL,\n        params: {\n          mode: \"single\",\n          country: country.toUpperCase(),\n          symbol: symbol.toUpperCase(),\n        },\n      }).then((res) => {\n        return res.data;\n      });\n\n      console.log(data);\n      if (data.error) {\n        console.error(data.error);\n\n        setError({\n          error: (\n            <div>\n              <h2>{data.error}</h2>\n            </div>\n          ),\n        });\n        return;\n      }\n\n      document.title = `${symbol} - ${data.profile.fullName} | Stocks`;\n      setDataSource({ ...data.data });\n      const profile = data.profile;\n\n      // eslint-disable-next-line no-unused-vars\n      const profileTemplate = {\n        profile: {\n          fullName: \"\",\n          accuracy: {\n            success: 0,\n            total: 0,\n            percentage: \"\",\n          },\n          price: 0,\n          date: new Date(),\n          difference: {\n            points: 0,\n            percentage: 0,\n          },\n          // action: \"\",\n          // status: \"\",\n        },\n        data: {\n          old: [],\n          current: [],\n        },\n      };\n\n      let price;\n\n      if (profile.difference.points < 0) {\n        price = (\n          <span style={{ color: \"green\" }}>\n            {profile.price} {\"  \"} {profile.difference.points} (\n            {profile.difference.percentage}%)\n          </span>\n        );\n      } else if (profile.difference.points > 0) {\n        price = (\n          <span style={{ color: \"red\" }}>\n            {profile.price} {\"  \"} +{profile.difference.points} (+\n            {profile.difference.percentage}%)\n          </span>\n        );\n      } else {\n        price = (\n          <span>\n            {profile.price}\n            {\"  \"} +{profile.difference.points} (+\n            {profile.difference.percentage}%)\n          </span>\n        );\n      }\n\n      let yahooLink;\n      if (country !== \"US\") {\n        yahooLink = `https://finance.yahoo.com/chart/${symbol}.${country}`;\n      } else {\n        yahooLink = `https://finance.yahoo.com/chart/${symbol}`;\n      }\n\n      const symbolTitle = (\n        <>\n          {profile.fullName} ({symbol}){\" \"}\n          <Rate count={1} onChange={onFavoriteChange} />{\" \"}\n          <a\n            href={yahooLink}\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            style={{ color: \"RGB(103, 37, 245)\" }}\n          >\n            Yahoo Finance <FontAwesomeIcon icon={faExternalLinkAlt} />\n          </a>\n          <br />\n          {price}\n          <br />\n          <small>{new Date(profile.date).toLocaleDateString()}</small>\n        </>\n      );\n      setHeader(\n        <div>\n          <Descriptions title={symbolTitle}>\n            <Descriptions.Item label=\"準確率\">\n              {profile.accuracy.percentage}% ({profile.accuracy.success} /{\" \"}\n              {profile.accuracy.total})\n            </Descriptions.Item>\n            {/* <Descriptions.Item label=\"策略\">買/賣</Descriptions.Item>\n        <Descriptions.Item label=\"股價狀態\">漲/跌</Descriptions.Item> */}\n          </Descriptions>\n        </div>\n      );\n      setFinishFetching(true);\n    } catch (e) {\n      console.error(e);\n      setError({\n        error: (\n          <div>\n            <h2>Unable to fetch data. Please try again later.</h2>\n          </div>\n        ),\n      });\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [country, symbol]);\n\n  const onFavoriteChange = (value) => {\n    const rawFavorite = localStorage.getItem(\"favorite\");\n    const favorite = rawFavorite ? JSON.parse(rawFavorite) : {};\n    const exchangeList = favorite || [];\n\n    if (value === 0) {\n      const symbolIndex = exchangeList.indexOf(symbol);\n      if (symbolIndex > -1) {\n        exchangeList.splice(symbolIndex, 1);\n      }\n    } else {\n      exchangeList.push(symbol);\n    }\n    localStorage.setItem(\"favorite\", JSON.stringify(favorite));\n  };\n\n  if (Object.keys(error).length > 0) {\n    return error.error;\n  }\n\n  return (\n    <div>\n      {finishFetching ? header : <Skeleton active />}\n      {finishFetching ? (\n        <div>\n          <Table\n            columns={singleStockColumns}\n            dataSource={dataSource.current}\n            size=\"small\"\n            pagination={{ defaultPageSize: 5 }}\n            scroll={{ x: 400 }}\n          />\n        </div>\n      ) : (\n        <Skeleton active />\n      )}\n      {finishFetching ? (\n        <div>\n          <h3>過往紀錄</h3>\n          <Table\n            columns={oldStockColumns}\n            dataSource={dataSource.old}\n            size=\"small\"\n            sortDirections={[\"descend\", \"ascend\"]}\n            scroll={{ x: 480 }}\n          />\n        </div>\n      ) : (\n        <Skeleton active />\n      )}\n    </div>\n  );\n}\n\nconst oldStockColumns = [\n  {\n    title: \"訊息\",\n    dataIndex: \"message\",\n    key: \"message\",\n    align: \"right\",\n    fixed: \"left\",\n    width: 100,\n  },\n  {\n    title: \"獲利\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      if (row.success) {\n        style.color = \"red\";\n      } else {\n        style.color = \"green\";\n      }\n      return (\n        <span style={style}>\n          <span>\n            {row.gain.price > 0 ? \"+\" : \"\"}\n            {row.gain.price}\n          </span>\n          <br />\n          <small>\n            {row.gain.price > 0 ? \"+\" : \"\"}\n            {row.gain.percentage}\n          </small>\n        </span>\n      );\n    },\n  },\n  {\n    title: \"買點\",\n    dataIndex: \"buy\",\n    key: \"buy\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <span style={{ textAlign: \"right\" }}>\n          <span>{row.buy.price}</span>\n          <br />\n          <small>{row.buy.date}</small>\n        </span>\n      );\n    },\n    sorter: (a, b) => {\n      const aDate = new Date(a.buy.date);\n      const bDate = new Date(b.buy.date);\n      return aDate - bDate;\n    },\n  },\n  {\n    title: \"賣點\",\n    dataIndex: \"sell\",\n    key: \"sell\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <span style={{ textAlign: \"right\" }}>\n          <span>{row.sell.price}</span>\n          <br />\n          <small>{row.sell.date}</small>\n        </span>\n      );\n    },\n  },\n  {\n    title: \"起漲點\",\n    dataIndex: \"start\",\n    key: \"start\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <span style={{ textAlign: \"right\" }}>\n          <span>{row.start.price}</span>\n          <br />\n          <small>{row.start.date}</small>\n        </span>\n      );\n    },\n  },\n  {\n    title: \"中間值\",\n    dataIndex: \"middle\",\n    key: \"middle\",\n    align: \"right\",\n    width: 120,\n    render: (text, row, index) => {\n      return (\n        <span style={{ textAlign: \"right\" }}>\n          <span>{row.middle.price}</span>\n          <br />\n          <small>\n            ({row.middle.difference.points}, {row.middle.difference.percentage}\n            %)\n          </small>\n          <br />\n          <small>{row.middle.date}</small>\n        </span>\n      );\n    },\n  },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    defaultSortOrder: \"descend\",\n    render: (text, row, index) => {\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      let style = {};\n      if (predictDate < currentDate) {\n        style.color = \"red\";\n      }\n      return (\n        <span style={{ textAlign: \"right\" }}>\n          <span>{row.predict.price}</span>\n          <br />\n          <small style={style}>{row.predict.date}</small>\n        </span>\n      );\n    },\n    sorter: (a, b) => a.predict.price - b.predict.price,\n  },\n];\n\n// eslint-disable-next-line no-unused-vars\nconst templateOldStockData = {\n  signal: \"change hand\",\n  action: \"buy\",\n  gain: {\n    price: 0,\n    percentage: \"%\",\n    speed: { speed: \"\", percentage: \"\" },\n  },\n  start: {\n    date: \"\",\n    price: 0,\n    index: 0,\n  },\n  middle: {\n    date: \"8/11/2020\",\n    price: 35.75,\n    percentage: \"0.86\",\n    index: 3582,\n  },\n  current: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  predict: {\n    date: \"1/5/2021\",\n    price: 51.6,\n  },\n  buy: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  sell: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  success: true / false,\n  index: 3582,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Tabs, Skeleton } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { singleStockColumns, tabName } from \"../utils/Constants\";\n\nexport default function Main({ stockData, activeTab, setActiveTab }) {\n  const [tabPanes, setTabPanes] = useState([]);\n  const { TabPane } = Tabs;\n  document.title = \"Stocks\";\n  useEffect(() => {\n    const exchangesToCountry = {\n      TPE: \"TW\",\n      NASDAQ: \"US\",\n      NYSE: \"US\",\n      HKG: \"HK\",\n    };\n    // parse raw data to website required format\n    const tabs = [];\n    for (let exchanges in stockData) {\n      const subTabs = [];\n\n      if (stockData[exchanges].notFetched) continue;\n      const exchangesAllData = stockData[exchanges].data;\n\n      if (!exchangesAllData) continue;\n      const date = stockData[exchanges].date;\n      let categories = {};\n      const firstKey = Object.keys(exchangesAllData)[0];\n      const firstData = exchangesAllData[firstKey].data;\n      for (let key in firstData) {\n        categories[key] = [];\n      }\n\n      for (let symbol in exchangesAllData) {\n        const fullName = exchangesAllData[symbol].fullName;\n        const stockData = exchangesAllData[symbol].data;\n\n        for (let category in stockData) {\n          const categoryData = stockData[category];\n          if (categoryData.length > 0) {\n            categories[category].push({\n              key: categories[category].length,\n              country: exchangesToCountry[exchanges],\n              stock: symbol,\n              fullName,\n              subDataSource: categoryData,\n            });\n          }\n        }\n      }\n\n      for (let category in categories) {\n        subTabs.push({\n          tabName: tabName[category] || category,\n          dataSource: categories[category],\n        });\n      }\n\n      tabs.push({\n        exchanges,\n        date,\n        subTabs,\n      });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const templateTab = [\n      {\n        exchanges: \"TPE\",\n        date: \"12/12/2020\",\n        subTabs: [\n          {\n            tabName: \"Today New\",\n            dataSource: [\n              {\n                key: 1,\n                exchanges: \"TPE\",\n                stock: \"2330\",\n                fullName: \"台積電\",\n                subDataSource: [\n                  {\n                    key: 1,\n                    start: {},\n                    middle: {},\n                    current: {},\n                    predict: {},\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ];\n\n    setTabPanes(tabs);\n  }, [stockData]);\n\n  const changeTab = (key) => {\n    setActiveTab({ exchanges: key, subTab: 0 });\n  };\n\n  const changeSubTab = (key) => {\n    setActiveTab({ ...activeTab, subTab: key });\n  };\n  return (\n    <Tabs defaultActiveKey={activeTab.exchange} onChange={changeTab}>\n      {tabPanes.map((tab) => {\n        if (tab.notFetched) {\n          return <Skeleton active />;\n        } else if (tab.error) {\n          return <h2>{tab.error}</h2>;\n        } else {\n          return (\n            <TabPane tab={tab.exchanges} key={tab.exchanges}>\n              <Tabs defaultActiveKey={activeTab.subTab} onChange={changeSubTab}>\n                {tab.subTabs.map((subTab, index2) => (\n                  <TabPane tab={subTab.tabName} key={index2}>\n                    <div style={{ margin: \"auto\" }}>\n                      <h4>最後更新: {tab.date}</h4>\n                      <h5>點擊各行以檢視詳細資料</h5>\n                      <Table\n                        key={index2}\n                        size=\"small\"\n                        columns={columns}\n                        bordered\n                        dataSource={subTab.dataSource}\n                        pagination={{\n                          defaultPageSize: 20,\n                          hideOnSinglePage: true,\n                        }}\n                        expandable={{\n                          expandedRowRender,\n                          expandRowByClick: true,\n                          indentSize: 0,\n                          expandIconColumnIndex: -1,\n                        }}\n                        scroll={{ x: 600 }}\n                        sortDirections={[\"descend\", \"ascend\"]}\n                      />\n                    </div>\n                  </TabPane>\n                ))}\n              </Tabs>\n            </TabPane>\n          );\n        }\n      })}\n\n      {/* <TabPane tab=\"Favorite\" key=\"1\">\n          <Table\n            columns={columns}\n            dataSource={dataSource}\n            expandable={{ expandedRowRender }}\n          />\n        </TabPane> */}\n    </Tabs>\n  );\n}\n\nconst expandedRowRender = (record) => {\n  let dataSource = [];\n  // for (let stock in raw) {\n  //   for (let i = 0; i < raw[stock].hold.length; i++) {\n  //     const processing = raw[stock].hold[i];\n  //     dataSource.push({\n  //       key: key++,\n  //       stock: stock,\n  //       buy: {\n  //         price: 0,\n  //         date: \"12/12/2020\",\n  //       },\n  //       ...processing,\n  //     });\n  //   }\n  // }\n  for (let i = 0; i < record.subDataSource.length; i++) {\n    const processing = record.subDataSource[i];\n    dataSource.push({\n      key: i,\n      stock: record.stock,\n      buy: {\n        price: 0,\n        date: \"12/12/2020\",\n      },\n      ...processing,\n    });\n  }\n\n  return (\n    <div style={{ margin: \"10px 0px\" }}>\n      <Table\n        size=\"small\"\n        columns={singleStockColumns}\n        dataSource={dataSource}\n        bordered\n        pagination={{ defaultPageSize: 20, hideOnSinglePage: true }}\n        scroll={{ x: 600 }}\n        sortDirections={[\"descend\", \"ascend\"]}\n      />\n    </div>\n  );\n};\n\nconst columns = [\n  {\n    title: \"股票\",\n    dataIndex: \"stock\",\n    key: \"stock\",\n    ellipsis: true,\n    // width: 100,\n    fixed: \"left\",\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n\n      let style = {};\n\n      let fullName = row.fullName;\n      // if (fullName.length > 25) {\n      //   fullName = fullName.substring(0, 25) + \"...\";\n      // }\n      let differencePoint = allData[0].current.difference.points;\n      let differencePct = allData[0].current.difference.percentage + \"%\";\n\n      if (differencePoint > 0) {\n        style.color = \"red\";\n      }\n\n      if (differencePoint >= 0) {\n        differencePoint = `+${differencePoint}`;\n        differencePct = `+${differencePct}`;\n      } else if (differencePoint < 0) {\n        style.color = \"green\";\n      }\n      let action = \"買\";\n      let actionStyle = { color: \"red\" };\n\n      for (let data of allData) {\n        if (data.action === \"賣\") {\n          action = \"賣\";\n          actionStyle.color = \"green\";\n          break;\n        }\n      }\n      let yahooLink;\n      if (row.country !== \"US\") {\n        yahooLink = `https://finance.yahoo.com/chart/${row.stock}.${row.country}`;\n      } else {\n        yahooLink = `https://finance.yahoo.com/chart/${row.stock}`;\n      }\n\n      return (\n        <span>\n          <Link to={`/${row.country}/${row.stock}`}>{text.padEnd(6)}</Link>\n          {\"  \"}\n          <a\n            href={yahooLink}\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            style={{ color: \"RGB(103, 37, 245)\" }}\n          >\n            <strong>\n              <em>Y</em>\n            </strong>\n          </a>\n          <br />\n          <Link to={`/${row.country}/${row.stock}`}>{fullName}</Link>\n          <br />\n          <span style={style}>\n            ${allData[0].current.price}{\" \"}\n            <span style={actionStyle}>{action}</span>\n            <br />({differencePoint}, {differencePct})\n            <br />\n          </span>\n        </span>\n      );\n    },\n    sorter: (a, b) => a.stock.localeCompare(b.stock),\n  },\n  {\n    title: \"最大漲速(週)\",\n    dataIndex: \"speed\",\n    key: \"speed\",\n    align: \"right\",\n    // width: 80,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let maxSpeed = 0,\n        maxSpeedPct = 0;\n      for (let data of allData) {\n        const middleDate = new Date(data.middle.date);\n        const currentDate = new Date(data.current.date);\n        const predictDate = new Date(data.predict.date);\n\n        const currentPriceDiff = data.current.price - data.middle.price;\n        const currentDateDiffMillis = currentDate - middleDate;\n        const currentDateDiff = currentDateDiffMillis / (1000 * 60 * 60 * 24);\n        let currentSpeed, currentSpeedPct;\n        if (currentDateDiff <= 0) {\n          currentSpeed = 0;\n          currentSpeedPct = 0;\n        } else {\n          currentSpeed =\n            Math.round((currentPriceDiff / ((currentDateDiff / 7) * 5)) * 100) /\n            100;\n          currentSpeedPct =\n            Math.round((currentSpeed / currentDateDiff) * 10000) / 100;\n        }\n\n        const expectPriceDiff = data.predict.price - data.middle.price;\n        const expectDateDiffMillis = predictDate - middleDate;\n        const expectDateDiff = expectDateDiffMillis / (1000 * 60 * 60 * 24);\n        let expectSpeed, expectSpeedPct;\n        if (expectDateDiff <= 0) {\n          expectSpeed = 0;\n          expectSpeedPct = 0;\n        } else {\n          expectSpeed =\n            Math.round((expectPriceDiff / ((expectDateDiff / 7) * 5)) * 100) /\n            100;\n          expectSpeedPct =\n            Math.round((expectSpeed / expectDateDiff) * 10000) / 100;\n        }\n\n        let speedPct = expectSpeedPct;\n        let speed = expectSpeed;\n\n        if (currentDateDiffMillis / expectDateDiffMillis >= 0.1) {\n          if (currentSpeedPct < expectSpeedPct) {\n            speedPct = currentSpeedPct;\n            speed = speedPct;\n          }\n        }\n\n        if (speedPct > maxSpeedPct) {\n          maxSpeedPct = speedPct;\n          maxSpeed = speed;\n        }\n      }\n\n      return (\n        <span>\n          <span>{maxSpeedPct}%</span>\n          <br />\n          <small>{maxSpeed}</small>\n        </span>\n      );\n    },\n    sorter: (a, b) => {\n      // sort by max speed\n      const aAllData = a.subDataSource;\n\n      let aMaxSpeedPct = 0;\n      for (let data of aAllData) {\n        const priceDiff = data.predict.price - data.current.price;\n        const dateDiffMillis =\n          new Date(data.predict.date) - new Date(data.current.date);\n        if (dateDiffMillis <= 0) continue;\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n        const speed = priceDiff / ((dateDiff / 7) * 5);\n        const speedPct = speed / dateDiff;\n\n        if (speedPct > aMaxSpeedPct) {\n          aMaxSpeedPct = speedPct;\n        }\n      }\n      const bAllData = b.subDataSource;\n\n      let bMaxSpeedPct = 0;\n      for (let data of bAllData) {\n        const priceDiff = data.predict.price - data.current.price;\n        const dateDiffMillis =\n          new Date(data.predict.date) - new Date(data.current.date);\n        if (dateDiffMillis <= 0) continue;\n\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n        const speed = priceDiff / ((dateDiff / 7) * 5);\n        const speedPct = speed / dateDiff;\n\n        if (speedPct > bMaxSpeedPct) {\n          bMaxSpeedPct = speedPct;\n        }\n      }\n\n      return aMaxSpeedPct - bMaxSpeedPct;\n    },\n  },\n  {\n    title: \"獲利空間\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    // width: 80,\n    defaultSortOrder: \"descend\",\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let min = allData[0].gain.price;\n      let minPct = allData[0].gain.percentage;\n      let max = allData[0].gain.price;\n      let maxPct = allData[0].gain.percentage;\n      const currentDate = new Date(allData[0].current.date);\n\n      for (let data of allData) {\n        const dataPredictDate = new Date(data.predict.date);\n        if (dataPredictDate <= currentDate) continue;\n\n        if (data.gain.price < min) {\n          min = data.gain.price;\n          minPct = data.gain.percentage;\n        }\n        if (data.gain.price > max) {\n          max = data.gain.price;\n          maxPct = data.gain.percentage;\n        }\n      }\n\n      const price = min === max ? min : `${min} - ${max}`;\n      const pct = minPct === maxPct ? minPct : `${minPct} - ${maxPct}`;\n      return (\n        <span>\n          <span>{price} </span>\n          <br />\n          <small>{pct} </small>\n        </span>\n      );\n    },\n    sorter: (a, b) => {\n      const pctToDouble = (pct) => {\n        if (typeof pct === \"number\") return pct;\n        return parseFloat(pct.substring(0, pct.length - 1));\n      };\n      // sort by max profit gain\n      const aAllData = a.subDataSource;\n      let aMin = pctToDouble(aAllData[0].gain.percentage);\n      let aMax = pctToDouble(aAllData[0].gain.percentage);\n      const currentDate = new Date(aAllData[0].current.date);\n\n      for (let data of aAllData) {\n        const dataPredictDate = new Date(data.predict.date);\n        if (dataPredictDate <= currentDate) continue;\n        aMin = Math.min(pctToDouble(data.gain.percentage), aMin);\n        aMax = Math.max(pctToDouble(data.gain.percentage), aMax);\n      }\n\n      const bAllData = b.subDataSource;\n      let bMin = pctToDouble(bAllData[0].gain.percentage);\n      let bMax = pctToDouble(bAllData[0].gain.percentage);\n      for (let data of bAllData) {\n        const dataPredictDate = new Date(data.predict.date);\n        if (dataPredictDate <= currentDate) continue;\n        bMin = Math.min(pctToDouble(data.gain.percentage, bMin));\n        bMax = Math.max(pctToDouble(data.gain.percentage, bMax));\n      }\n\n      return aMax - bMax;\n    },\n  },\n  // {\n  //   title: \"現價\",\n  //   dataIndex: \"currentPrice\",\n  //   key: \"currentPrice\",\n  //   align: \"right\",\n\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     // if (row.current.price < row.buy.price) {\n  //     //   style.color = \"green\";\n  //     // } else {\n  //     //   style.color = \"red\";\n  //     // }\n  //     const allData = row.subDataSource;\n\n  //     return (\n  //       <span>\n  //         <span style={style}>{allData[0].current.price} </span>\n  //       </span>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"買價\",\n  //   dataIndex: \"buy\",\n  //   key: \"buy\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <span style={{ textAlign: \"right\" }}>\n  //         <span>{row.buy.price}</span>\n  //         <br />\n  //         <small>{row.buy.date}</small>\n  //       </span>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"起漲點\",\n  //   dataIndex: \"start\",\n  //   key: \"start\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <span style={{ textAlign: \"right\" }}>\n  //         <span>{row.start.price}</span>\n  //         <br />\n  //         <small>{row.start.date}</small>\n  //       </span>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"現在獲利\",\n  //   dataIndex: \"currentGain\",\n  //   key: \"currentGain\",\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     if (row.current.price < row.buy.price) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <span style={style}>\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n  //         <br />\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n  //       </span>\n  //     );\n  //   },\n  // },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    // width: 90,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let min = allData[0].predict.price;\n      let minDate = allData[0].predict.date;\n      let max = allData[0].predict.price;\n      let maxDate = allData[0].predict.date;\n      for (let data of allData) {\n        if (data.predict.price < min) {\n          min = data.predict.price;\n          minDate = data.predict.date;\n        }\n        if (data.predict.price > max) {\n          max = data.predict.price;\n          maxDate = data.predict.date;\n        }\n      }\n      const price = min === max ? min : `${min} - ${max}`;\n      const date = min === max ? minDate : `${minDate} - ${maxDate}`;\n      return (\n        <span>\n          <span>{price} </span>\n          <br />\n          <small>{date} </small>\n        </span>\n      );\n    },\n  } /*\n    {\n      title: \"最高目標價\",\n      dataIndex: \"maxPredict\",\n      key: \"maxPredict\",\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let max = allData[0].predict.price;\n        let maxDate = allData[0].predict.date;\n        for (let data of allData) {\n          if (data.predict.price > max) {\n            max = data.predict.price;\n            maxDate = data.predict.date;\n          }\n        }\n        return (\n          <span style={{ textAlign: \"right\" }}>\n            <span>{max}</span>\n            <br />\n            <small>{maxDate}</small>\n          </span>\n        );\n      },\n      sorter: (a, b) => a.predict.price - b.predict.price,\n    },*/,\n];\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Row, Col, message } from \"antd\";\nimport { HashRouter, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { parse } from \"node-html-parser\";\nimport { decode } from \"html-entities\";\nimport Single from \"./single/Single\";\nimport Main from \"./main/Main\";\nimport { appScriptURL, summaryLink } from \"./utils/Constants\";\n\nfunction App() {\n  let stockDataInitial = {};\n  for (let exchange in summaryLink) {\n    stockDataInitial[exchange] = { notFetched: true };\n  }\n  const [stockData, setStockData] = useState(stockDataInitial);\n\n  // eslint-disable-next-line no-unused-vars\n  const stockDataTemplate = {\n    exchange: {\n      date: \"2021/01/01\",\n      data: {},\n    },\n  };\n\n  const [mainLastActiveTab, setMainLastActiveTab] = useState({\n    exchange: \"TW\",\n    subTab: 0,\n  });\n\n  useEffect(() => {\n    // get summary exchange web url\n    for (let exchange in summaryLink) {\n      // skeleton on\n      // const data = fetchData(summaryLink[exchange]);\n\n      const start = new Date();\n      axios\n        .get(summaryLink[exchange])\n        .then((res) => {\n          return res.data;\n        })\n        .then((res) => {\n          const html = parse(res);\n\n          const viewport = html.querySelector(\"#sheets-viewport\");\n          const lastDayTab =\n            viewport.childNodes[viewport.childNodes.length - 1];\n          const id = lastDayTab.id;\n          const sheetMenu = html.querySelector(\"#sheet-menu\");\n\n          const date = sheetMenu.querySelector(`#sheet-button-${id}`)\n            .childNodes[0].innerText;\n          const tableBody = viewport.querySelector(`#${id} table tbody`);\n\n          let data = {};\n\n          data.date = date;\n\n          for (let i = 1; i < tableBody.childNodes.length; i++) {\n            const tr = tableBody.childNodes[i];\n\n            for (let j = 1; j < tr.childNodes.length; j++) {\n              const td = tr.childNodes[j];\n              const text = decode(td.innerText);\n              if (text === \"\") continue;\n              const parsedText = JSON.parse(text);\n              data.data = { ...data.data, ...parsedText };\n            }\n          }\n          console.log(\"Fetch took \" + (new Date() - start) / 1000 + \"s\");\n          console.log(data);\n\n          setStockData((s) => {\n            return { ...s, [exchange]: data };\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          setStockData((s) => {\n            return {\n              ...s,\n              [exchange]: {\n                error: \"Something went wrong. Please try again later\",\n              },\n            };\n          }) \n        });\n\n      // skeleton off\n    }\n  }, []);\n\n  return (\n    <div style={{ padding: 10 }}>\n      <HashRouter>\n        <Header></Header>\n        <div style={{ width: \"95%\", margin: \"auto\" }}>\n          <Switch>\n            <Route exact path=\"/:country/:symbol\" component={Single} />\n            <Route exact path=\"/\">\n              <Main\n                stockData={stockData}\n                setStockData={setStockData}\n                activeTab={mainLastActiveTab}\n                setActiveTab={setMainLastActiveTab}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nconst Header = () => {\n  const { Option } = Select;\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    fetchStockList();\n  }, []);\n\n  const fetchStockList = async () => {\n    try {\n      const data = await axios({\n        url: appScriptURL,\n        params: { mode: \"stock-list\" },\n      }).then((res) => {\n        return res.data;\n      });\n\n      setOptions(data);\n    } catch (err) {\n      console.error(err);\n      message.error(\"Search Function will not work\");\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  const template = [\n    { exchange: \"NASDAQ\", symbol: \"AAPL\", fullName: \"Apple Inc.\" },\n  ];\n\n  const onSelect = (value) => {\n    window.location.href = \"/stocks/#/\" + value;\n  };\n\n  const filterOption = (input, option) => {\n    return (\n      option.symbol.toLowerCase().indexOf(input.toLowerCase()) >= 0 ||\n      option.fullName.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    );\n  };\n\n  const filterSort = (optionA, optionB) => {\n    const symbolCompare = optionA.symbol\n      .toLowerCase()\n      .localeCompare(optionB.symbol.toLowerCase());\n    if (symbolCompare !== 0) {\n      return symbolCompare;\n    }\n    return optionA.fullName\n      .toLowerCase()\n      .localeCompare(optionB.fullName.toLowerCase());\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div style={{ width: \"95%\", margin: \"auto\" }}>\n        <Row>\n          <Col xs={8} sm={8} md={6} lg={6} xl={5} xxl={4}>\n            <h1>\n              <Link to=\"/\" style={{ color: \"black\" }}>\n                Stocks\n              </Link>\n            </h1>\n          </Col>\n          <Col\n            xs={16}\n            sm={16}\n            md={18}\n            lg={18}\n            xl={19}\n            xxl={20}\n            style={{ textAlign: \"right\", paddingTop: 6 }}\n          >\n            <Select\n              showSearch\n              defaultActiveFirstOption={false}\n              showArrow={false}\n              filterOption={filterOption}\n              filterSort={filterSort}\n              onSelect={onSelect}\n              notFoundContent={null}\n              placeholder=\"Search...\"\n              style={{ maxWidth: \"250px\", width: \"100%\", textAlign: \"left\" }}\n            >\n              {options.map((option) => (\n                <Option\n                  key={`${option.country}/${option.symbol}`}\n                  value={`${option.country}/${option.symbol}`}\n                  symbol={option.symbol}\n                  fullName={option.fullName}\n                >\n                  <span>\n                    {option.symbol} ({option.country})\n                  </span>\n                  <br />\n                  <small>{option.fullName}</small>\n                </Option>\n              ))}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}