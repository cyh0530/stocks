{"version":3,"sources":["utils/Constants.js","single/Single.js","main/Main.js","App.js","index.js"],"names":["appScriptURL","singleStockColumns","title","dataIndex","key","align","width","render","text","row","index","action","style","textAlign","color","currentDate","Date","current","date","predict","speed","speedPct","priceDiff","price","dateDiff","Math","round","defaultSortOrder","sorter","a","b","aPredictDate","bPredictDate","aPriceDiff","aDateDiff","aSpeedPct","bPriceDiff","bDateDiff","gain","percentage","start","middle","difference","points","tabName","new","hold","alert","temp","Single","useParams","country","symbol","useState","profile","setProfile","oldDataSource","setOldDataSource","currentDataSource","setCurrentDataSource","useEffect","axios","url","params","mode","toUpperCase","then","res","data","console","log","error","document","fullName","old","catch","err","message","symbolTitle","count","onChange","value","rawFavorite","localStorage","getItem","favorite","JSON","parse","exchangeList","symbolIndex","indexOf","splice","push","setItem","stringify","Item","label","columns","dateSource","oldStockColumns","success","notifyBuy","notifySell","Main","stockData","tabPanes","setTabPanes","TabPane","Tabs","tabs","exchanges","subTabs","exchangesAllData","categories","firstData","Object","keys","category","categoryData","length","stock","subDataSource","dataSource","defaultActiveKey","map","tab","subTab","index2","margin","size","bordered","pagination","defaultPageSize","hideOnSinglePage","expandable","expandedRowRender","expandRowByClick","scroll","x","record","i","processing","buy","ellipsis","fixed","allData","differencePoint","differencePct","to","padEnd","maxSpeed","maxSpeedPct","dateDiffMillis","aAllData","aMaxSpeedPct","bAllData","bMaxSpeedPct","min","minPct","max","maxPct","pct","aMin","aMax","bMin","bMax","minDate","maxDate","Header","Option","Select","options","setOptions","fetchStockList","xs","sm","md","lg","xl","xxl","showSearch","defaultActiveFirstOption","showArrow","filterOption","input","option","toLowerCase","filterSort","optionA","optionB","symbolCompare","localeCompare","onSelect","window","location","href","notFoundContent","placeholder","App","setStockData","fetchTodayData","loading","content","duration","get","html","Map","viewport","querySelector","childNodes","forEach","node","set","id","sheetMenu","innerText","name","tableBody","minusIndex","tr","replace","parsedText","padding","basename","exact","path","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.99fd3768.chunk.js","sourcesContent":["export const summaryLink =\n  \"https://docs.google.com/spreadsheets/u/1/d/e/2PACX-1vQGMwv4tEoSbTjgtSht6LZ5Vxlwb0Y4Lm1z5Pp0tuBcSaZE9AMTY_isyio7Sc-_C8LHsfv_xMptHeqA/pubhtml\";\n\nexport const appScriptURL =\n  \"https://script.google.com/a/uw.edu/macros/s/AKfycbzdeg0uAW8TFykGSnDPjMxYhAayyAfcQEnuByZm7ykEKiXJbdk/exec\";\n\nexport const MODE = {\n  color: [\n    {\n      rise: \"red\",\n      fall: \"green\",\n    },\n    { rise: \"green\", fall: \"red\" },\n  ],\n};\n\nexport const singleStockColumns = [\n  // {\n  //   title: \"買價\",\n  //   dataIndex: \"buy\",\n  //   key: \"buy\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span>{row.buy.price}</span>\n  //         <br />\n  //         <small>{row.buy.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"行為\",\n    dataIndex: \"action\",\n    key: \"action\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      let action;\n      if (text === \"buy\") {\n        style.color = \"red\";\n        action = \"買\";\n      } else if (text === \"sell\") {\n        style.color = \"green\";\n        action = \"賣\";\n      }\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          <span>{action}</span>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"漲速(週)\",\n    dataIndex: \"speed\",\n    key: \"speed\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const priceDiff = row.predict.price - row.current.price;\n      const dateDiffMillis =\n        new Date(row.predict.date) - new Date(row.current.date);\n      const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n      let speed, speedPct;\n      if (dateDiff <= 0) {\n        speed = 0;\n        speedPct = 0;\n      } else {\n        speed = Math.round((priceDiff / ((dateDiff / 7) * 5)) * 100) / 100;\n        speedPct = Math.round((speed / dateDiff) * 10000) / 100;\n      }\n\n      let style = { textAlign: \"right\" };\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n\n      return (\n        <p style={style}>\n          <span>{speedPct}%</span>\n          <br />\n          <small>{speed}</small>\n        </p>\n      );\n    },\n    defaultSortOrder: \"descend\",\n    sorter: (a, b) => {\n      const currentDate = new Date(a.current.date);\n      const aPredictDate = new Date(a.predict.date);\n      const bPredictDate = new Date(b.predict.date);\n\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\n        return aPredictDate - bPredictDate;\n      } else if (aPredictDate <= currentDate) {\n        return -1;\n      } else if (bPredictDate <= currentDate) {\n        return 1;\n      }\n\n      const aPriceDiff = a.predict.price - a.current.price;\n      const aDateDiffMillis =\n        new Date(a.predict.date) - new Date(a.current.date);\n      const aDateDiff = aDateDiffMillis / (1000 * 60 * 60 * 24);\n      const aSpeed =\n        Math.round((aPriceDiff / ((aDateDiff / 7) * 5)) * 100) / 100;\n      const aSpeedPct = aSpeed / aDateDiff;\n\n      const bPriceDiff = b.predict.price - b.current.price;\n      const bDateDiffMillis =\n        new Date(b.predict.date) - new Date(b.current.date);\n      const bDateDiff = bDateDiffMillis / (1000 * 60 * 60 * 24);\n      const bSpeed =\n        Math.round((bPriceDiff / ((bDateDiff / 7) * 5)) * 100) / 100;\n      const bSpeedPct = bSpeed / bDateDiff;\n\n      return aSpeedPct - bSpeedPct;\n    },\n  },\n  {\n    title: \"獲利空間\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n\n      return (\n        <p style={style}>\n          <span>{row.gain.price}</span>\n          <br />\n          <small>{row.gain.percentage}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => {\n      const currentDate = new Date(a.current.date);\n      const aPredictDate = new Date(a.predict.date);\n      const bPredictDate = new Date(b.predict.date);\n\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\n        return aPredictDate - bPredictDate;\n      } else if (aPredictDate <= currentDate) {\n        return -1;\n      } else if (bPredictDate <= currentDate) {\n        return 1;\n      }\n      return a.gain.price - b.gain.price;\n    },\n  },\n  {\n    title: \"起漲點\",\n    dataIndex: \"start\",\n    key: \"start\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          <span>{row.start.price}</span>\n          <br />\n          <small>{row.start.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"中間值\",\n    dataIndex: \"middle\",\n    key: \"middle\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      return (\n        <p style={style}>\n          <span>{row.middle.price}</span>\n          <br />\n          <small>\n            ({row.middle.difference.points}, {row.middle.difference.percentage}\n            %)\n          </small>\n          <br />\n          <small>{row.middle.date}</small>\n        </p>\n      );\n    },\n  },\n  // {\n  //   title: \"現價\",\n  //   dataIndex: \"currentPrice\",\n  //   key: \"currentPrice\",\n  //   align: \"right\",\n  //   width: 100,\n  //   render: (text, row, index) => {\n  //     let style = {};\n  //     if (row.current.difference.points < 0) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span style={style}>{row.current.price}</span>\n  //         <br />\n  //         <span>{row.current.difference.percentage}%</span>\n  //         <br />\n  //         <small>{row.current.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"現在獲利\",\n  //   dataIndex: \"currentGain\",\n  //   key: \"currentGain\",\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     if (row.current.price < row.buy.price) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={style}>\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n  //         <br />\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      let style = {};\n      if (predictDate < currentDate) {\n        style.color = \"gray\";\n      }\n      \n      return (\n        <p style={style}>\n          <span>{row.predict.price}</span>\n          <br />\n          <small>{row.predict.date}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.predict.price - b.predict.price,\n  },\n];\n\nexport const tabName = {\n  new: \"今日新增\",\n  hold: \"持有\",\n  alert: \"警戒\",\n  temp: \"觀察\",\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Rate, Table, message, Descriptions } from \"antd\";\nimport axios from \"axios\";\nimport { singleStockColumns } from \"../utils/Constants\";\nimport { useParams } from \"react-router-dom\";\nimport { appScriptURL } from \"../utils/Constants\";\n\nexport default function Single() {\n  const { country, symbol } = useParams();\n  const [profile, setProfile] = useState({});\n  const [oldDataSource, setOldDataSource] = useState([]);\n  const [currentDataSource, setCurrentDataSource] = useState([]);\n\n  useEffect(() => {\n    axios({\n      url: appScriptURL,\n      params: {\n        mode: \"single\",\n        country: country.toUpperCase(),\n        symbol: symbol.toUpperCase(),\n      },\n    })\n      .then((res) => {\n        return res.data;\n      })\n      .then((res) => {\n        console.log(res);\n        if (res.error) {\n          console.error(res.error);\n          // message.error(\"Something went wrong. Please try again later\");\n          return (\n            <div>\n              <h2>Sorry, we don't have this stock in our database.</h2>\n              <h2>Please try other stocks. Thank you!</h2>\n            </div>\n          );\n        }\n        // eslint-disable-next-line no-unused-vars\n        const resultTemplate = {\n          profile: {\n            fullName: \"\",\n            accuracy: {\n              success: 0,\n              total: 0,\n              percentage: \"\",\n            },\n            // action: \"\",\n            // status: \"\",\n          },\n          data: {\n            old: [],\n            current: [],\n          },\n        };\n\n        document.title = `${symbol} - ${res.fullName} | Stocks`;\n        setProfile(res.profile);\n        setOldDataSource(res.data.old);\n        setCurrentDataSource(res.data.current);\n      })\n      .catch((err) => {\n        console.error(err);\n        message.error(\"Unable to fetch data. Please try again later.\");\n      });\n  }, [country, symbol]);\n\n  const onFavoriteChange = (value) => {\n    const rawFavorite = localStorage.getItem(\"favorite\");\n    const favorite = rawFavorite ? JSON.parse(rawFavorite) : {};\n    const exchangeList = favorite || [];\n\n    if (value === 0) {\n      const symbolIndex = exchangeList.indexOf(symbol);\n      if (symbolIndex > -1) {\n        exchangeList.splice(symbolIndex, 1);\n      }\n    } else {\n      exchangeList.push(symbol);\n    }\n    localStorage.setItem(\"favorite\", JSON.stringify(favorite));\n  };\n\n  const symbolTitle = (\n    <>\n      {profile.fullName} ({symbol}){\" \"}\n      <Rate count={1} onChange={onFavoriteChange} />\n    </>\n  );\n  return (\n    <div>\n      <div>\n        <Descriptions title={symbolTitle}>\n          <Descriptions.Item label=\"準確率\">\n            {/* {profile.accuracy.percentage}% ({profile.accuracy.success} /{\" \"}\n            {profile.accuracy.total}) */}\n          </Descriptions.Item>\n          {/* <Descriptions.Item label=\"策略\">買/賣</Descriptions.Item>\n          <Descriptions.Item label=\"股價狀態\">漲/跌</Descriptions.Item> */}\n        </Descriptions>\n      </div>\n      <div>\n        <Table columns={singleStockColumns} dateSource={currentDataSource} />\n      </div>\n      <div>\n        <h3>過往紀錄</h3>\n        <Table columns={oldStockColumns} dateSource={oldDataSource} />\n      </div>\n    </div>\n  );\n}\n\nconst oldStockColumns = [\n  {\n    title: \"獲利\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      if (row.success) {\n        style.color = \"red\";\n      } else {\n        style.color = \"green\";\n      }\n      return (\n        <p style={style}>\n          <span>\n            {row.gain.price > 0 ? \"+\" : \"\"}\n            {row.gain.price}\n          </span>\n          <br />\n          <small>\n            {row.gain.price > 0 ? \"+\" : \"\"}\n            {row.gain.percentage}\n          </small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"買點\",\n    dataIndex: \"notifyBuy\",\n    key: \"notifyBuy\",\n    align: \"right\",\n    width: 100,\n    defaultSortOrder: \"descend\",\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.notifyBuy.price}</span>\n          <br />\n          <small>{row.notifyBuy.date}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => {\n      const aDate = new Date(a.notifyBuy.date);\n      const bDate = new Date(b.notifyBuy.date);\n      return aDate - bDate;\n    },\n  },\n  {\n    title: \"賣點\",\n    dataIndex: \"notifySell\",\n    key: \"notifySell\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.notifySell.price}</span>\n          <br />\n          <small>{row.notifySell.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"起漲點\",\n    dataIndex: \"start\",\n    key: \"start\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.start.price}</span>\n          <br />\n          <small>{row.start.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"中間值\",\n    dataIndex: \"middle\",\n    key: \"middle\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.middle.price}</span>\n          <br />\n          <span>{row.middle.difference.percentage}%</span>\n          <br />\n          <small>{row.middle.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const currentDate = new Date(row.current.date);\n      const predictDate = new Date(row.predict.date);\n      let style = {};\n      if (predictDate < currentDate) {\n        style.color = \"red\";\n      }\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.predict.price}</span>\n          <br />\n          <small style={style}>{row.predict.date}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.predict.price - b.predict.price,\n  },\n];\n\n// eslint-disable-next-line no-unused-vars\nconst templateOldStockData = {\n  signal: \"change hand\",\n  action: \"buy\",\n  gain: {\n    price: 0,\n    percentage: \"%\",\n    speed: { speed: \"\", percentage: \"\" },\n  },\n  start: {\n    date: \"\",\n    price: 0,\n    index: 0,\n  },\n  middle: {\n    date: \"8/11/2020\",\n    price: 35.75,\n    percentage: \"0.86\",\n    index: 3582,\n  },\n  current: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  predict: {\n    date: \"1/5/2021\",\n    price: 51.6,\n  },\n  notifyBuy: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  notifySell: {\n    date: \"1/15/2021\",\n    price: 40.1,\n    difference: {\n      points: \"-0.85\",\n      percentage: \"-2.08\",\n    },\n    index: 3691,\n  },\n  success: true / false,\n  index: 3582,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Tabs } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { singleStockColumns, tabName } from \"../utils/Constants\";\n\nexport default function Main({ stockData }) {\n  const [tabPanes, setTabPanes] = useState([]);\n  const { TabPane } = Tabs;\n\n  useEffect(() => {\n    // parse raw data to website required format\n    const tabs = [];\n    for (let exchanges in stockData) {\n      const subTabs = [];\n      const exchangesAllData = stockData[exchanges];\n      let categories = {};\n      const firstKey = Object.keys(exchangesAllData)[0];\n      const firstData = exchangesAllData[firstKey].data;\n      for (let key in firstData) {\n        categories[key] = [];\n      }\n\n      for (let symbol in exchangesAllData) {\n        const fullName = exchangesAllData[symbol].fullName;\n        const stockData = exchangesAllData[symbol].data;\n\n        for (let category in stockData) {\n          const categoryData = stockData[category];\n          if (categoryData.length > 0) {\n            categories[category].push({\n              key: categories[category].length,\n              exchanges: exchanges,\n              stock: symbol,\n              fullName,\n              subDataSource: categoryData,\n            });\n          }\n        }\n      }\n\n      for (let category in categories) {\n        subTabs.push({\n          tabName: tabName[category] || category,\n          dataSource: categories[category],\n        });\n      }\n\n      tabs.push({\n        exchanges,\n        subTabs,\n      });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const templateTab = [\n      {\n        exchanges: \"TPE\",\n        subTabs: [\n          {\n            tabName: \"Today New\",\n            dataSource: [\n              {\n                key: 1,\n                exchanges: \"TPE\",\n                stock: \"2330\",\n                fullName: \"台積電\",\n                subDataSource: [\n                  {\n                    key: 1,\n                    start: {},\n                    middle: {},\n                    current: {},\n                    predict: {},\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    console.log(tabs);\n\n    setTabPanes(tabs);\n  }, [stockData]);\n\n  return (\n    <Tabs defaultActiveKey=\"0\">\n      {tabPanes.map((tab, index) => (\n        <TabPane tab={tab.exchanges} key={index}>\n          <Tabs defaultActiveKey=\"0\">\n            {tab.subTabs.map((subTab, index2) => (\n              <TabPane tab={subTab.tabName} key={index2}>\n                <div style={{ margin: \"auto\" }}>\n                  <Table\n                    key={index2}\n                    size=\"small\"\n                    columns={columns}\n                    bordered\n                    dataSource={subTab.dataSource}\n                    pagination={{ defaultPageSize: 20, hideOnSinglePage: true }}\n                    expandable={{ expandedRowRender, expandRowByClick: true }}\n                    scroll={{ x: 600 }}\n                  />\n                </div>\n              </TabPane>\n            ))}\n          </Tabs>\n        </TabPane>\n      ))}\n      {/* <TabPane tab=\"Favorite\" key=\"1\">\n          <Table\n            columns={columns}\n            dataSource={dataSource}\n            expandable={{ expandedRowRender }}\n          />\n        </TabPane> */}\n    </Tabs>\n  );\n}\n\nconst expandedRowRender = (record) => {\n  let dataSource = [];\n  // for (let stock in raw) {\n  //   for (let i = 0; i < raw[stock].hold.length; i++) {\n  //     const processing = raw[stock].hold[i];\n  //     dataSource.push({\n  //       key: key++,\n  //       stock: stock,\n  //       buy: {\n  //         price: 0,\n  //         date: \"12/12/2020\",\n  //       },\n  //       ...processing,\n  //     });\n  //   }\n  // }\n  for (let i = 0; i < record.subDataSource.length; i++) {\n    const processing = record.subDataSource[i];\n    dataSource.push({\n      key: i,\n      stock: record.stock,\n      buy: {\n        price: 0,\n        date: \"12/12/2020\",\n      },\n      ...processing,\n    });\n  }\n  console.log(dataSource);\n  return (\n    <div style={{ margin: \"10px 0px\" }}>\n      <Table\n        size=\"small\"\n        columns={singleStockColumns}\n        dataSource={dataSource}\n        bordered\n        pagination={{ defaultPageSize: 20, hideOnSinglePage: true }}\n        scroll={{ x: 600 }}\n      />\n    </div>\n  );\n};\n\nconst columns = [\n  {\n    title: \"股票\",\n    dataIndex: \"stock\",\n    key: \"stock\",\n    ellipsis: true,\n    width: 100,\n    fixed: \"left\",\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n\n      let style = { color: \"green\" };\n\n      let fullName = row.fullName;\n      // if (fullName.length > 25) {\n      //   fullName = fullName.substring(0, 25) + \"...\";\n      // }\n      let differencePoint = allData[0].current.difference.points;\n      let differencePct = allData[0].current.difference.percentage + \"%\";\n      if (differencePoint > 0) {\n        differencePoint = `+${differencePoint}`;\n        differencePct = `+${differencePct}`;\n        style.color = \"red\";\n      }\n      return (\n        <p>\n          <Link to={`/${row.country}/${row.stock}`}>\n            {text.padEnd(6)} <span> - {fullName}</span>\n          </Link>\n          <br />\n          <span style={style}>\n            ${allData[0].current.price} ({differencePoint}, {differencePct})\n          </span>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.stock - b.stock,\n  },\n  {\n    title: \"行為\",\n    dataIndex: \"action\",\n    key: \"action\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let action = \"買\";\n      let style = {color: \"red\"};\n\n      for (let data of allData) {\n        if (data.action === \"sell\") {\n          action = \"賣\";\n          style.color = \"green\";\n          break;\n        }\n      }\n\n      return (\n        <p style={style}>\n          <span>{action}</span>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"最大漲速(週)\",\n    dataIndex: \"speed\",\n    key: \"speed\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let maxSpeed = 0,\n        maxSpeedPct = 0;\n      for (let data of allData) {\n        const priceDiff = data.predict.price - data.current.price;\n        const dateDiffMillis =\n          new Date(data.predict.date) - new Date(data.current.date);\n        if (dateDiffMillis <= 0) continue;\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n        const speed =\n          Math.round((priceDiff / ((dateDiff / 7) * 5)) * 100) / 100;\n        const speedPct = Math.round((speed / dateDiff) * 10000) / 100;\n\n        if (speedPct > maxSpeedPct) {\n          maxSpeedPct = speedPct;\n          maxSpeed = speed;\n        }\n      }\n\n      return (\n        <p>\n          <span>{maxSpeedPct}%</span>\n          <br />\n          <small>{maxSpeed}</small>\n        </p>\n      );\n    },\n    defaultSortOrder: \"descend\",\n    sorter: (a, b) => {\n      // sort by max speed\n      const aAllData = a.subDataSource;\n\n      let aMaxSpeedPct = 0;\n      for (let data of aAllData) {\n        const priceDiff = data.predict.price - data.current.price;\n        const dateDiffMillis =\n          new Date(data.predict.date) - new Date(data.current.date);\n        if (dateDiffMillis <= 0) continue;\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n        const speed = priceDiff / ((dateDiff / 7) * 5);\n        const speedPct = speed / dateDiff;\n\n        if (speedPct > aMaxSpeedPct) {\n          aMaxSpeedPct = speedPct;\n        }\n      }\n      const bAllData = b.subDataSource;\n\n      let bMaxSpeedPct = 0;\n      for (let data of bAllData) {\n        const priceDiff = data.predict.price - data.current.price;\n        const dateDiffMillis =\n          new Date(data.predict.date) - new Date(data.current.date);\n        if (dateDiffMillis <= 0) continue;\n\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n        const speed = priceDiff / ((dateDiff / 7) * 5);\n        const speedPct = speed / dateDiff;\n\n        if (speedPct > bMaxSpeedPct) {\n          bMaxSpeedPct = speedPct;\n        }\n      }\n\n      return aMaxSpeedPct - bMaxSpeedPct;\n    },\n  },\n  {\n    title: \"獲利空間\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let min = allData[0].gain.price;\n      let minPct = allData[0].gain.percentage;\n      let max = allData[0].gain.price;\n      let maxPct = allData[0].gain.percentage;\n      for (let data of allData) {\n        if (data.gain.price < min) {\n          min = data.gain.price;\n          minPct = data.gain.percentage;\n        }\n        if (data.gain.price > max) {\n          max = data.gain.price;\n          maxPct = data.gain.percentage;\n        }\n      }\n\n      const price = min === max ? min : `${min} - ${max}`;\n      const pct = minPct === maxPct ? minPct : `${minPct} - ${maxPct}`;\n      return (\n        <p>\n          <span>{price} </span>\n          <br />\n          <small>{pct} </small>\n        </p>\n      );\n    },\n    sorter: (a, b) => {\n      // sort by max profit gain\n      const aAllData = a.subDataSource;\n      let aMin = aAllData[0].gain.price;\n      let aMax = aAllData[0].gain.price;\n      const currentDate = new Date(aAllData[0].current.date);\n\n      for (let data of aAllData) {\n        const dataPredictDate = new Date(data.predict.date);\n        if (dataPredictDate <= currentDate) continue;\n        aMin = Math.min(data.gain.price, aMin);\n        aMax = Math.max(data.gain.price, aMax);\n      }\n\n      const bAllData = b.subDataSource;\n      let bMin = bAllData[0].gain.price;\n      let bMax = bAllData[0].gain.price;\n      for (let data of bAllData) {\n        const dataPredictDate = new Date(data.predict.date);\n        if (dataPredictDate <= currentDate) continue;\n        bMin = Math.min(data.gain.price, bMin);\n        bMax = Math.max(data.gain.price, bMax);\n      }\n\n      return aMax - bMax;\n    },\n  },\n  // {\n  //   title: \"現價\",\n  //   dataIndex: \"currentPrice\",\n  //   key: \"currentPrice\",\n  //   align: \"right\",\n\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     // if (row.current.price < row.buy.price) {\n  //     //   style.color = \"green\";\n  //     // } else {\n  //     //   style.color = \"red\";\n  //     // }\n  //     const allData = row.subDataSource;\n\n  //     return (\n  //       <p>\n  //         <span style={style}>{allData[0].current.price} </span>\n  //       </p>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"買價\",\n  //   dataIndex: \"buy\",\n  //   key: \"buy\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span>{row.buy.price}</span>\n  //         <br />\n  //         <small>{row.buy.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"起漲點\",\n  //   dataIndex: \"start\",\n  //   key: \"start\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span>{row.start.price}</span>\n  //         <br />\n  //         <small>{row.start.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  // {\n  //   title: \"現在獲利\",\n  //   dataIndex: \"currentGain\",\n  //   key: \"currentGain\",\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     if (row.current.price < row.buy.price) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={style}>\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n  //         <br />\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const allData = row.subDataSource;\n      let min = allData[0].predict.price;\n      let minDate = allData[0].predict.date;\n      let max = allData[0].predict.price;\n      let maxDate = allData[0].predict.date;\n      for (let data of allData) {\n        if (data.predict.price < min) {\n          min = data.predict.price;\n          minDate = data.predict.date;\n        }\n        if (data.predict.price > max) {\n          max = data.predict.price;\n          maxDate = data.predict.date;\n        }\n      }\n      const price = min === max ? min : `${min} - ${max}`;\n      const date = min === max ? minDate : `${minDate} - ${maxDate}`;\n      return (\n        <p>\n          <span>{price} </span>\n          <br />\n          <small>{date} </small>\n        </p>\n      );\n    },\n  } /*\n    {\n      title: \"最高目標價\",\n      dataIndex: \"maxPredict\",\n      key: \"maxPredict\",\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let max = allData[0].predict.price;\n        let maxDate = allData[0].predict.date;\n        for (let data of allData) {\n          if (data.predict.price > max) {\n            max = data.predict.price;\n            maxDate = data.predict.date;\n          }\n        }\n        return (\n          <p style={{ textAlign: \"right\" }}>\n            <span>{max}</span>\n            <br />\n            <small>{maxDate}</small>\n          </p>\n        );\n      },\n      sorter: (a, b) => a.predict.price - b.predict.price,\n    },*/,\n];\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Row, Col, message } from \"antd\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { parse } from \"node-html-parser\";\nimport Single from \"./single/Single\";\nimport Main from \"./main/Main\";\nimport { appScriptURL, summaryLink } from \"./utils/Constants\";\n\nfunction App() {\n  const [stockData, setStockData] = useState({});\n\n  useEffect(() => {\n    fetchTodayData();\n  }, []);\n\n  const fetchTodayData = async () => {\n    try {\n      message.loading({ content: \"Loading...\", key: \"loading\", duration: 0 });\n      const res = await axios\n        .get(summaryLink)\n        .then((res) => {\n          return res.data;\n        })\n        .then((res) => {\n          return res;\n        });\n\n      const html = parse(res);\n      const tabs = new Map();\n\n      const viewport = html.querySelector(\"#sheets-viewport\");\n      viewport.childNodes.forEach((node) => {\n        tabs.set(node.id, { id: node.id, key: node.id });\n      });\n\n      const sheetMenu = html.querySelector(\"#sheet-menu\");\n      tabs.forEach((value, id) => {\n        const tabName = sheetMenu.querySelector(`#sheet-button-${id}`)\n          .childNodes[0].innerText;\n        tabs.set(id, {\n          ...tabs.get(id),\n          name: tabName,\n        });\n      });\n      let data = {};\n\n      tabs.forEach((value, id) => {\n        const tableBody = viewport.querySelector(`#${id} table tbody`);\n\n        let minusIndex = 1;\n\n        while (tableBody.childNodes.length - minusIndex > 1) {\n          const tr =\n            tableBody.childNodes[tableBody.childNodes.length - minusIndex];\n          // date = tr.childNodes[1].innerText;\n          let index = 2;\n          for (index = 2; index < tr.childNodes.length; index++) {\n            const td = tr.childNodes[index];\n            const text = td.innerText.replace(/&quot;/g, '\"');\n            if (text === \"\") break;\n            const parsedText = JSON.parse(text);\n            data[value.name] = { ...data[value.name], ...parsedText };\n          }\n          if (index > 2) break;\n\n          minusIndex++;\n        }\n      });\n\n      setStockData(data);\n      message.success({\n        content: \"Finish loading\",\n        key: \"loading\",\n        duration: 0.5,\n      });\n    } catch (err) {\n      console.error(err);\n      message.error(\"Something went wrong. Please try again later\");\n    }\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n      <BrowserRouter basename=\"/stocks\">\n        <Header></Header>\n        <div style={{ width: \"95%\", margin: \"auto\" }}>\n          <Switch>\n            <Route exact path=\"/:country/:symbol\" component={Single} />\n            <Route exact path=\"/\">\n              <Main stockData={stockData} />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst Header = () => {\n  const { Option } = Select;\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    fetchStockList();\n  }, []);\n\n  const fetchStockList = async () => {\n    try {\n      const data = await axios({\n        url: appScriptURL,\n        params: { mode: \"stock-list\" },\n      }).then((res) => {\n        return res.data;\n      });\n\n      console.log(data);\n      // setOptions([]);\n      setOptions(data);\n    } catch (err) {\n      console.error(err);\n      message.error(\"Search Function will not work\");\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  const template = [\n    { exchange: \"NASDAQ\", symbol: \"AAPL\", fullName: \"Apple Inc.\" },\n  ];\n\n  const onSelect = (value) => {\n    window.location.href = \"/stocks/\" + value;\n  };\n\n  const filterOption = (input, option) => {\n    return (\n      option.symbol.toLowerCase().indexOf(input.toLowerCase()) >= 0 ||\n      option.fullName.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    );\n  };\n\n  const filterSort = (optionA, optionB) => {\n    const symbolCompare = optionA.symbol\n      .toLowerCase()\n      .localeCompare(optionB.symbol.toLowerCase());\n    if (symbolCompare !== 0) {\n      return symbolCompare;\n    }\n    return optionA.fullName\n      .toLowerCase()\n      .localeCompare(optionB.fullName.toLowerCase());\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div style={{ width: \"95%\", margin: \"auto\" }}>\n        <Row>\n          <Col xs={24} sm={24} md={6} lg={6} xl={5} xxl={4}>\n            <h1>\n              <Link to=\"/\" style={{ color: \"black\" }}>\n                Stocks\n              </Link>\n            </h1>{\" \"}\n          </Col>\n          <Col\n            xs={0}\n            sm={0}\n            md={18}\n            lg={18}\n            xl={19}\n            xxl={20}\n            style={{ textAlign: \"right\" }}\n          >\n            <Select\n              showSearch\n              defaultActiveFirstOption={false}\n              showArrow={false}\n              filterOption={filterOption}\n              filterSort={filterSort}\n              onSelect={onSelect}\n              notFoundContent={null}\n              placeholder=\"Search...\"\n              style={{ width: \"250px\", textAlign: \"left\" }}\n            >\n              {options.map((option) => (\n                <Option\n                  key={`${option.country}/${option.symbol}`}\n                  value={`${option.country}/${option.symbol}`}\n                >\n                  <span>{option.symbol}</span>\n                  <br />\n                  <small>{option.fullName}</small>\n                </Option>\n              ))}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}