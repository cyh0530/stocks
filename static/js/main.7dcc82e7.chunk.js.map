{"version":3,"sources":["utils/Constants.js","single/Single.js","main/Main.js","App.js","index.js"],"names":["appScriptURL","singleStockColumns","title","dataIndex","key","align","width","render","text","row","index","priceDiff","predict","price","current","dateDiff","Date","date","speed","Math","round","speedPct","style","textAlign","defaultSortOrder","sorter","a","b","aPriceDiff","aDateDiff","aSpeed","aSpeedPct","bPriceDiff","bDateDiff","bSpeed","gain","percentage","start","middle","buy","color","Single","useParams","exchange","symbol","useState","fullName","setFullName","oldDataSource","setOldDataSource","currentDataSource","setCurrentDataSource","useEffect","fetch","then","res","ok","data","document","old","catch","err","console","error","message","symbolTitle","count","onChange","value","rawFavorite","localStorage","getItem","favorite","JSON","parse","exchangeList","symbolIndex","indexOf","splice","push","setItem","stringify","Item","label","columns","dateSource","Main","stockData","ellipsis","fixed","allData","subDataSource","to","exchanges","stock","padEnd","maxSpeed","maxSpeedPct","aAllData","aMaxSpeedPct","bAllData","bMaxSpeedPct","min","minPct","max","maxPct","pct","aMin","aMax","bMin","bMax","minDate","maxDate","tabPanes","setTabPanes","TabPane","Tabs","tabs","subTabs","exchangesAllData","newDataSource","holdDataSource","newData","new","holdData","hold","length","tabName","dataSource","concat","log","defaultActiveKey","map","tab","subTab","index2","margin","size","bordered","expandable","expandedRowRender","expandRowByClick","scroll","x","record","i","processing","pagination","defaultPageSize","hideOnSinglePage","Header","Option","Select","options","setOptions","fetchStockList","axios","get","xs","sm","md","lg","xl","xxl","showSearch","defaultActiveFirstOption","showArrow","filterOption","input","option","toLowerCase","filterSort","optionA","optionB","symbolCompare","localeCompare","onSelect","window","location","href","notFoundContent","placeholder","App","setStockData","setDate","fetchTodayData","loading","content","duration","html","viewport","querySelector","tableBody","columnsNameRow","childNodes","columnsName","innerText","exchangeHasContent","minusIndex","allDone","tr","j","td","replace","parsedText","success","padding","basename","exact","path","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.7dcc82e7.chunk.js","sourcesContent":["export const summaryLink =\n  \"https://docs.google.com/spreadsheets/u/1/d/e/2PACX-1vQGMwv4tEoSbTjgtSht6LZ5Vxlwb0Y4Lm1z5Pp0tuBcSaZE9AMTY_isyio7Sc-_C8LHsfv_xMptHeqA/pubhtml\";\n\nexport const appScriptURL =\n  \"https://script.google.com/a/uw.edu/macros/s/AKfycbzdeg0uAW8TFykGSnDPjMxYhAayyAfcQEnuByZm7ykEKiXJbdk/exec?\";\nexport const singleStockColumns = [\n  // {\n  //   title: \"買價\",\n  //   dataIndex: \"buy\",\n  //   key: \"buy\",\n  //   render: (text, row, index) => {\n  //     return (\n  //       <p style={{ textAlign: \"right\" }}>\n  //         <span>{row.buy.price}</span>\n  //         <br />\n  //         <small>{row.buy.date}</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"漲速(週)\",\n    dataIndex: \"speed\",\n    key: \"speed\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      const priceDiff = row.predict.price - row.current.price;\n      const dateDiffMillis =\n        new Date(row.predict.date) - new Date(row.current.date);\n      const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n      const speed = Math.round((priceDiff / ((dateDiff / 7) * 5)) * 100) / 100;\n      const speedPct = Math.round((speed / dateDiff) * 100) / 100;\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{speedPct}%</span>\n          <br />\n          <small>{speed}</small>\n        </p>\n      );\n    },\n    defaultSortOrder: \"descend\",\n    sorter: (a, b) => {\n      const aPriceDiff = a.predict.price - a.current.price;\n      const aDateDiffMillis =\n        new Date(a.predict.date) - new Date(a.current.date);\n      const aDateDiff = aDateDiffMillis / (1000 * 60 * 60 * 24);\n      const aSpeed =\n        Math.round((aPriceDiff / ((aDateDiff / 7) * 5)) * 100) / 100;\n      const aSpeedPct = Math.round((aSpeed / aDateDiff) * 100) / 100;\n\n      const bPriceDiff = b.predict.price - b.current.price;\n      const bDateDiffMillis =\n        new Date(b.predict.date) - new Date(b.current.date);\n      const bDateDiff = bDateDiffMillis / (1000 * 60 * 60 * 24);\n      const bSpeed =\n        Math.round((bPriceDiff / ((bDateDiff / 7) * 5)) * 100) / 100;\n      const bSpeedPct = Math.round((bSpeed / bDateDiff) * 100) / 100;\n\n      return aSpeedPct - bSpeedPct;\n    },\n  },\n  {\n    title: \"獲利空間\",\n    dataIndex: \"gain\",\n    key: \"gain\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.gain.price}</span>\n          <br />\n          <small>{row.gain.percentage}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.gain.price - b.gain.price,\n  },\n  {\n    title: \"起漲點\",\n    dataIndex: \"start\",\n    key: \"start\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.start.price}</span>\n          <br />\n          <small>{row.start.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"中間值\",\n    dataIndex: \"middle\",\n    key: \"middle\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.middle.price}</span>\n          <br />\n          <small>{row.middle.date}</small>\n        </p>\n      );\n    },\n  },\n  {\n    title: \"現價\",\n    dataIndex: \"currentPrice\",\n    key: \"currentPrice\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      let style = { textAlign: \"right\" };\n      if (row.current.price < row.buy.price) {\n        style.color = \"green\";\n      } else {\n        style.color = \"red\";\n      }\n      return (\n        <p style={style}>\n          <span>{row.current.price}</span>\n          <br />\n          <small style={{ color: \"black\" }}>{row.current.date}</small>\n        </p>\n      );\n    },\n  },\n  // {\n  //   title: \"現在獲利\",\n  //   dataIndex: \"currentGain\",\n  //   key: \"currentGain\",\n  //   render: (text, row, index) => {\n  //     let style = { textAlign: \"right\" };\n  //     if (row.current.price < row.buy.price) {\n  //       style.color = \"green\";\n  //     } else {\n  //       style.color = \"red\";\n  //     }\n  //     return (\n  //       <p style={style}>\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n  //         <br />\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n  //       </p>\n  //     );\n  //   },\n  // },\n  {\n    title: \"目標價\",\n    dataIndex: \"predict\",\n    key: \"predict\",\n    align: \"right\",\n    width: 100,\n    render: (text, row, index) => {\n      return (\n        <p style={{ textAlign: \"right\" }}>\n          <span>{row.predict.price}</span>\n          <br />\n          <small>{row.predict.date}</small>\n        </p>\n      );\n    },\n    sorter: (a, b) => a.predict.price - b.predict.price,\n  },\n];\n","import React, { useState, useEffect } from \"react\";\nimport { Rate, Table, message, Descriptions } from \"antd\";\nimport { singleStockColumns } from \"../utils/Constants\";\nimport { useParams } from \"react-router-dom\";\nimport { appScriptURL } from \"../utils/Constants\";\n\nexport default function Single() {\n  const { exchange, symbol } = useParams();\n  const [fullName, setFullName] = useState(\"\");\n  const [oldDataSource, setOldDataSource] = useState([]);\n  const [currentDataSource, setCurrentDataSource] = useState([]);\n\n  useEffect(() => {\n    fetch(appScriptURL + `mode=single&exchange=${exchange}&symbol=${symbol}`)\n      .then((res) => {\n        if (res.ok) return res.data;\n      })\n      .then((res) => {\n        // eslint-disable-next-line no-unused-vars\n        const template = {\n          fullName: \"\",\n          old: [],\n          current: [],\n        };\n        document.title = `${symbol} - ${res.fullName} | Stocks`;\n        setFullName(res.fullName);\n        setOldDataSource(res.old);\n        setCurrentDataSource(res.current);\n      })\n      .catch((err) => {\n        console.error(err);\n        message.error(\"Unable to fetch data. Please try again later.\");\n      });\n  }, [exchange, symbol]);\n\n  const onFavoriteChange = (value) => {\n    const rawFavorite = localStorage.getItem(\"favorite\");\n    const favorite = rawFavorite ? JSON.parse(rawFavorite) : {};\n    const exchangeList = favorite || [];\n\n    if (value === 0) {\n      const symbolIndex = exchangeList.indexOf(symbol);\n      if (symbolIndex > -1) {\n        exchangeList.splice(symbolIndex, 1);\n      }\n    } else {\n      exchangeList.push(symbol);\n    }\n    localStorage.setItem(\"favorite\", JSON.stringify(favorite));\n  };\n\n  const symbolTitle = (\n    <>\n      {fullName} ({symbol}) <Rate count={1} onChange={onFavoriteChange} />\n    </>\n  );\n  return (\n    <div>\n      <div>\n        <Descriptions title={symbolTitle}>\n          <Descriptions.Item label=\"準確率\">95%</Descriptions.Item>\n          <Descriptions.Item label=\"策略\">買/賣</Descriptions.Item>\n          <Descriptions.Item label=\"股價狀態\">漲/跌</Descriptions.Item>\n        </Descriptions>\n      </div>\n      <div>\n        <Table columns={singleStockColumns} dateSource={currentDataSource} />\n      </div>\n      <div>\n        <h3>過往紀錄</h3>\n        <Table columns={singleStockColumns} dateSource={oldDataSource} />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Tabs } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nimport { singleStockColumns } from \"../utils/Constants\";\n\nexport default function Main({ stockData }) {\n  const columns = [\n    {\n      title: \"股票\",\n      dataIndex: \"stock\",\n      key: \"stock\",\n      ellipsis: true,\n      width: 100,\n      fixed: \"left\",\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n\n        let style = { textAlign: \"right\" };\n        // if (row.current.price < row.buy.price) {\n        //   style.color = \"green\";\n        // } else {\n        //   style.color = \"red\";\n        // }\n        let fullName = row.fullName;\n        // if (fullName.length > 25) {\n        //   fullName = fullName.substring(0, 25) + \"...\";\n        // }\n        return (\n          <>\n            <p>\n              <Link to={`/${row.exchanges}/${row.stock}`}>\n                {text.padEnd(6)} <span style={style}> - {fullName}</span>\n              </Link>\n              <br />\n              <>${allData[0].current.price} </>\n            </p>\n          </>\n        );\n      },\n      sorter: (a, b) => a.stock - b.stock,\n    },\n    {\n      title: \"最大漲速(週)\",\n      dataIndex: \"speed\",\n      key: \"speed\",\n      align: \"right\",\n      width: 100,\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let maxSpeed = 0,\n          maxSpeedPct = 0;\n        for (let data of allData) {\n          const priceDiff = data.predict.price - data.current.price;\n          const dateDiffMillis =\n            new Date(data.predict.date) - new Date(data.current.date);\n          const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n          const speed =\n            Math.round((priceDiff / ((dateDiff / 7) * 5)) * 10000) / 10000;\n          const speedPct = Math.round((speed / dateDiff) * 100) / 100;\n\n          if (speedPct > maxSpeedPct) {\n            maxSpeedPct = speedPct;\n            maxSpeed = speed;\n          }\n        }\n\n        return (\n          <p>\n            <span>{maxSpeedPct}%</span>\n            <br />\n            <small>{maxSpeed}</small>\n          </p>\n        );\n      },\n      defaultSortOrder: \"descend\",\n      sorter: (a, b) => {\n        const aAllData = a.subDataSource;\n\n        let aMaxSpeedPct = 0;\n        for (let data of aAllData) {\n          const priceDiff = data.predict.price - data.current.price;\n          const dateDiffMillis =\n            new Date(data.predict.date) - new Date(data.current.date);\n          const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n          const speed =\n            Math.round((priceDiff / ((dateDiff / 7) * 5)) * 100) / 100;\n          const speedPct = Math.round((speed / dateDiff) * 100) / 100;\n\n          if (speedPct > aMaxSpeedPct) {\n            aMaxSpeedPct = speedPct;\n          }\n        }\n        const bAllData = b.subDataSource;\n\n        let bMaxSpeedPct = 0;\n        for (let data of bAllData) {\n          const priceDiff = data.predict.price - data.current.price;\n          const dateDiffMillis =\n            new Date(data.predict.date) - new Date(data.current.date);\n          const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\n          const speed =\n            Math.round((priceDiff / ((dateDiff / 7) * 5)) * 100) / 100;\n          const speedPct = Math.round((speed / dateDiff) * 100) / 100;\n\n          if (speedPct > bMaxSpeedPct) {\n            bMaxSpeedPct = speedPct;\n          }\n        }\n\n        return aMaxSpeedPct - bMaxSpeedPct;\n      },\n    },\n    {\n      title: \"獲利空間\",\n      dataIndex: \"gain\",\n      key: \"gain\",\n      align: \"right\",\n      width: 100,\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let min = allData[0].gain.price;\n        let minPct = allData[0].gain.percentage;\n        let max = allData[0].gain.price;\n        let maxPct = allData[0].gain.percentage;\n        for (let data of allData) {\n          if (data.gain.price < min) {\n            min = data.gain.price;\n            minPct = data.gain.percentage;\n          }\n          if (data.gain.price > max) {\n            max = data.gain.price;\n            maxPct = data.gain.percentage;\n          }\n        }\n\n        const price = min === max ? min : `${min} - ${max}`;\n        const pct = minPct === maxPct ? minPct : `${minPct} - ${maxPct}`;\n        return (\n          <p>\n            <span>{price} </span>\n            <br />\n            <small>{pct} </small>\n          </p>\n        );\n      },\n      sorter: (a, b) => {\n        const aAllData = a.subDataSource;\n        let aMin = aAllData[0].predict.price;\n        let aMax = aAllData[0].predict.price;\n        for (let data of aAllData) {\n          aMin = Math.min(data.predict.price, aMin);\n          aMax = Math.max(data.predict.price, aMax);\n        }\n\n        const bAllData = b.subDataSource;\n        let bMin = bAllData[0].predict.price;\n        let bMax = bAllData[0].predict.price;\n        for (let data of bAllData) {\n          bMin = Math.min(data.predict.price, bMin);\n          bMax = Math.max(data.predict.price, bMax);\n        }\n\n        return aMax - bMax;\n      },\n    },\n    // {\n    //   title: \"現價\",\n    //   dataIndex: \"currentPrice\",\n    //   key: \"currentPrice\",\n    //   align: \"right\",\n\n    //   render: (text, row, index) => {\n    //     let style = { textAlign: \"right\" };\n    //     // if (row.current.price < row.buy.price) {\n    //     //   style.color = \"green\";\n    //     // } else {\n    //     //   style.color = \"red\";\n    //     // }\n    //     const allData = row.subDataSource;\n\n    //     return (\n    //       <p>\n    //         <span style={style}>{allData[0].current.price} </span>\n    //       </p>\n    //     );\n    //   },\n    // },\n    // {\n    //   title: \"買價\",\n    //   dataIndex: \"buy\",\n    //   key: \"buy\",\n    //   render: (text, row, index) => {\n    //     return (\n    //       <p style={{ textAlign: \"right\" }}>\n    //         <span>{row.buy.price}</span>\n    //         <br />\n    //         <small>{row.buy.date}</small>\n    //       </p>\n    //     );\n    //   },\n    // },\n    // {\n    //   title: \"起漲點\",\n    //   dataIndex: \"start\",\n    //   key: \"start\",\n    //   render: (text, row, index) => {\n    //     return (\n    //       <p style={{ textAlign: \"right\" }}>\n    //         <span>{row.start.price}</span>\n    //         <br />\n    //         <small>{row.start.date}</small>\n    //       </p>\n    //     );\n    //   },\n    // },\n    // {\n    //   title: \"現在獲利\",\n    //   dataIndex: \"currentGain\",\n    //   key: \"currentGain\",\n    //   render: (text, row, index) => {\n    //     let style = { textAlign: \"right\" };\n    //     if (row.current.price < row.buy.price) {\n    //       style.color = \"green\";\n    //     } else {\n    //       style.color = \"red\";\n    //     }\n    //     return (\n    //       <p style={style}>\n    //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\n    //         <br />\n    //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\n    //       </p>\n    //     );\n    //   },\n    // },\n    {\n      title: \"目標價\",\n      dataIndex: \"predict\",\n      key: \"predict\",\n      align: \"right\",\n      width: 100,\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let min = allData[0].predict.price;\n        let minDate = allData[0].predict.date;\n        let max = allData[0].predict.price;\n        let maxDate = allData[0].predict.date;\n        for (let data of allData) {\n          if (data.predict.price < min) {\n            min = data.predict.price;\n            minDate = data.predict.date;\n          }\n          if (data.predict.price > max) {\n            max = data.predict.price;\n            maxDate = data.predict.date;\n          }\n        }\n        const price = min === max ? min : `${min} - ${max}`;\n        const date = min === max ? minDate : `${minDate} - ${maxDate}`;\n        return (\n          <p>\n            <span>{price} </span>\n            <br />\n            <small>{date} </small>\n          </p>\n        );\n      },\n    } /*\n    {\n      title: \"最高目標價\",\n      dataIndex: \"maxPredict\",\n      key: \"maxPredict\",\n      render: (text, row, index) => {\n        const allData = row.subDataSource;\n        let max = allData[0].predict.price;\n        let maxDate = allData[0].predict.date;\n        for (let data of allData) {\n          if (data.predict.price > max) {\n            max = data.predict.price;\n            maxDate = data.predict.date;\n          }\n        }\n        return (\n          <p style={{ textAlign: \"right\" }}>\n            <span>{max}</span>\n            <br />\n            <small>{maxDate}</small>\n          </p>\n        );\n      },\n      sorter: (a, b) => a.predict.price - b.predict.price,\n    },*/,\n  ];\n  const [tabPanes, setTabPanes] = useState([]);\n  const { TabPane } = Tabs;\n\n  useEffect(() => {\n    // parse raw data to website required format\n    const tabs = [];\n    for (let exchanges in stockData) {\n      const subTabs = [];\n      const exchangesAllData = stockData[exchanges];\n      const newDataSource = [];\n      const holdDataSource = [];\n      for (let symbol in exchangesAllData) {\n        const fullName = exchangesAllData[symbol].fullName;\n        const stockData = exchangesAllData[symbol].data;\n        const newData = stockData.new;\n        const holdData = stockData.hold;\n\n        if (newData.length > 0) {\n          newDataSource.push({\n            key: newDataSource.length,\n            exchanges: exchanges,\n            stock: symbol,\n            fullName,\n            subDataSource: newData,\n          });\n        }\n        if (holdData.length > 0) {\n          holdDataSource.push({\n            key: holdDataSource.length,\n            exchanges: exchanges,\n            stock: symbol,\n            fullName,\n            subDataSource: holdData,\n          });\n        }\n      }\n\n      subTabs.push({\n        tabName: \"Today New\",\n        dataSource: newDataSource,\n      });\n\n      subTabs.push({\n        tabName: \"All\",\n        dataSource: holdDataSource.concat(newDataSource),\n      });\n\n      tabs.push({\n        exchanges,\n        subTabs,\n      });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const templateTab = [\n      {\n        exchanges: \"TPE\",\n        subTabs: [\n          {\n            tabName: \"Today New\",\n            dataSource: [\n              {\n                key: 1,\n                exchanges: \"TPE\",\n                stock: \"2330\",\n                fullName: \"台積電\",\n                subDataSource: [\n                  {\n                    key: 1,\n                    start: {},\n                    middle: {},\n                    current: {},\n                    predict: {},\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    console.log(tabs);\n\n    setTabPanes(tabs);\n  }, [stockData]);\n\n  return (\n    <Tabs defaultActiveKey=\"0\">\n      {tabPanes.map((tab, index) => (\n        <TabPane tab={tab.exchanges} key={index}>\n          <Tabs defaultActiveKey=\"0\">\n            {tab.subTabs.map((subTab, index2) => (\n              <TabPane tab={subTab.tabName} key={index2}>\n                <div style={{ margin: \"auto\" }}>\n                  <Table\n                    key={index2}\n                    size=\"small\"\n                    columns={columns}\n                    bordered\n                    dataSource={subTab.dataSource}\n                    expandable={{ expandedRowRender, expandRowByClick: true }}\n                    scroll={{ x: 600 }}\n                  />\n                </div>\n              </TabPane>\n            ))}\n          </Tabs>\n        </TabPane>\n      ))}\n      {/* <TabPane tab=\"Favorite\" key=\"1\">\n          <Table\n            columns={columns}\n            dataSource={dataSource}\n            expandable={{ expandedRowRender }}\n          />\n        </TabPane> */}\n    </Tabs>\n  );\n}\n\nconst expandedRowRender = (record) => {\n  let dataSource = [];\n  // for (let stock in raw) {\n  //   for (let i = 0; i < raw[stock].hold.length; i++) {\n  //     const processing = raw[stock].hold[i];\n  //     dataSource.push({\n  //       key: key++,\n  //       stock: stock,\n  //       buy: {\n  //         price: 0,\n  //         date: \"12/12/2020\",\n  //       },\n  //       ...processing,\n  //     });\n  //   }\n  // }\n  for (let i = 0; i < record.subDataSource.length; i++) {\n    const processing = record.subDataSource[i];\n    dataSource.push({\n      key: i,\n      stock: record.stock,\n      buy: {\n        price: 0,\n        date: \"12/12/2020\",\n      },\n      ...processing,\n    });\n  }\n  console.log(dataSource);\n  return (\n    <div style={{ margin: \"10px 0px\" }}>\n      <Table\n        size=\"small\"\n        columns={singleStockColumns}\n        dataSource={dataSource}\n        bordered\n        pagination={{ defaultPageSize: 100, hideOnSinglePage: true }}\n        scroll={{ x: 600 }}\n      />\n    </div>\n  );\n};\n/*\n  for (let stock in raw) {\n    for (let i = 0; i < raw[stock].hold.length; i++) {\n      const processing = raw[stock].hold[i];\n      dataSource.push({\n        key: i,\n        stock: stock,\n        buy: {\n          price: 0,\n          date: \"12/12/2020\",\n        },\n        ...processing,\n      });\n    }\n  }\n\nconst raw = {\n  長榮海運: {\n    new: [],\n    hold: [\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 7.2,\n          percentage: \"18.85%\",\n        },\n        start: {\n          date: \"3/19/2020\",\n          price: 8.9,\n          index: 3484,\n        },\n        \"change hand\": {\n          date: \"12/11/2020\",\n          price: 27.15,\n          index: 3667,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"9/4/2021\",\n          price: 45.4,\n        },\n        index: 3667,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 5.45,\n          percentage: \"14.27%\",\n        },\n        start: {\n          date: \"7/14/2020\",\n          price: 10.65,\n          index: 3562,\n        },\n        \"change hand\": {\n          date: \"12/11/2020\",\n          price: 27.15,\n          index: 3667,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"5/10/2021\",\n          price: 43.65,\n        },\n        index: 3667,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 1.3,\n          percentage: \"3.4%\",\n        },\n        start: {\n          date: \"9/24/2020\",\n          price: 14.8,\n          index: 3614,\n        },\n        \"change hand\": {\n          date: \"12/11/2020\",\n          price: 27.15,\n          index: 3667,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"2/27/2021\",\n          price: 39.5,\n        },\n        index: 3667,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 10.2,\n          percentage: \"26.7%\",\n        },\n        start: {\n          date: \"3/19/2020\",\n          price: 8.9,\n          index: 3484,\n        },\n        \"change hand\": {\n          date: \"12/15/2020\",\n          price: 28.65,\n          index: 3669,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"9/12/2021\",\n          price: 48.4,\n        },\n        index: 3669,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 8.45,\n          percentage: \"22.12%\",\n        },\n        start: {\n          date: \"7/14/2020\",\n          price: 10.65,\n          index: 3562,\n        },\n        \"change hand\": {\n          date: \"12/15/2020\",\n          price: 28.65,\n          index: 3669,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"5/18/2021\",\n          price: 46.65,\n        },\n        index: 3669,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 4.3,\n          percentage: \"11.26%\",\n        },\n        start: {\n          date: \"9/24/2020\",\n          price: 14.8,\n          index: 3614,\n        },\n        \"change hand\": {\n          date: \"12/15/2020\",\n          price: 28.65,\n          index: 3669,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"3/7/2021\",\n          price: 42.5,\n        },\n        index: 3669,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 13.3,\n          percentage: \"34.82%\",\n        },\n        start: {\n          date: \"3/19/2020\",\n          price: 8.9,\n          index: 3484,\n        },\n        \"change hand\": {\n          date: \"12/22/2020\",\n          price: 30.2,\n          index: 3674,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"9/26/2021\",\n          price: 51.5,\n        },\n        index: 3674,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 11.55,\n          percentage: \"30.24%\",\n        },\n        start: {\n          date: \"7/24/2020\",\n          price: 10.65,\n          index: 3570,\n        },\n        \"change hand\": {\n          date: \"12/22/2020\",\n          price: 30.2,\n          index: 3674,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"5/22/2021\",\n          price: 49.75,\n        },\n        index: 3674,\n      },\n      {\n        signal: \"change hand\",\n        action: \"buy\",\n        gain: {\n          price: 7.4,\n          percentage: \"19.37%\",\n        },\n        start: {\n          date: \"9/24/2020\",\n          price: 14.8,\n          index: 3614,\n        },\n        \"change hand\": {\n          date: \"12/22/2020\",\n          price: 30.2,\n          index: 3674,\n        },\n        current: {\n          date: \"12/30/2020\",\n          price: 38.2,\n          index: 3680,\n        },\n        predict: {\n          date: \"3/21/2021\",\n          price: 45.6,\n        },\n        index: 3674,\n      },\n    ],\n    remove: [],\n  },\n};\n*/\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Row, Col, message } from \"antd\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { parse } from \"node-html-parser\";\nimport Single from \"./single/Single\";\nimport Main from \"./main/Main\";\nimport { appScriptURL, summaryLink } from \"./utils/Constants\";\n\nfunction App() {\n  const [stockData, setStockData] = useState({});\n  const [date, setDate] = useState(\"\");\n  useEffect(() => {\n    fetchTodayData();\n  }, []);\n\n  const fetchTodayData = async () => {\n    try {\n      message.loading({ content: \"Loading...\", key: \"loading\", duration: 0 });\n      const res = await axios\n        .get(summaryLink)\n        .then((res) => {\n          return res.data;\n        })\n        .then((res) => {\n          return res;\n        });\n      const html = parse(res);\n\n      const viewport = html.querySelector(\"#sheets-viewport\");\n      const tableBody = viewport.querySelector(\"#0 table tbody\");\n      const columnsNameRow = tableBody.childNodes[0];\n      let columnsName = [];\n      for (let i = 0; i < columnsNameRow.childNodes.length; i++) {\n        columnsName.push(columnsNameRow.childNodes[i].innerText);\n      }\n      let data = {};\n\n      // read all days\n      /*\n        for (let i = 0; i < tableBody.childNodes.length; i++) {\n          const tr = tableBody.childNodes[i];\n          let rowData = {};\n          const date = tr.childNodes[1].innerText;\n\n          for (let j = 2; j < tr.childNodes.length; j++) {\n            const td = tr.childNodes[j];\n            const text = td.innerText.replace(/&quot;/g, '\"');\n            rowData[columnsName[j]] = text;\n          }\n          data[date] = rowData;\n        }*/\n\n      // read the last day\n      let exchangeHasContent = {};\n      for (let i = 1; i < columnsName.length; i++) {\n        exchangeHasContent[columnsName[i]] = false;\n      }\n      let minusIndex = 1;\n      let date;\n\n      const allDone = () => {\n        for (let exchange in exchangeHasContent) {\n          if (!exchangeHasContent[exchange]) return false;\n        }\n        return true;\n      };\n      while (!allDone() && tableBody.childNodes.length - minusIndex > 1) {\n        const tr =\n          tableBody.childNodes[tableBody.childNodes.length - minusIndex];\n        date = tr.childNodes[1].innerText;\n        for (let j = 2; j < tr.childNodes.length; j++) {\n          if (exchangeHasContent[columnsName[j]]) continue;\n          const td = tr.childNodes[j];\n          const text = td.innerText.replace(/&quot;/g, '\"');\n          if (text === \"{}\") continue;\n          const parsedText = JSON.parse(text);\n          data[columnsName[j]] = parsedText;\n          exchangeHasContent[columnsName[j]] = true;\n        }\n        minusIndex++;\n      }\n\n      setStockData(data);\n      setDate(date);\n      message.success({\n        content: \"Finish loading\",\n        key: \"loading\",\n        duration: 0.5,\n      });\n    } catch (err) {\n      console.error(err);\n      message.error(\"Something went wrong. Please try again later\");\n    }\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n      <BrowserRouter basename=\"/stocks\">\n        <Header date={date}></Header>\n        <div style={{ width: \"95%\", margin: \"auto\" }}>\n          <Switch>\n            <Route exact path=\"/:exchange/:symbol\" component={Single} />\n            <Route exact path=\"/\">\n              <Main stockData={stockData} />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst Header = ({ date }) => {\n  const { Option } = Select;\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    fetchStockList();\n  }, []);\n\n  const fetchStockList = async () => {\n    try {\n      const data = await axios\n        .get(appScriptURL + \"?mode=stock-list\")\n        .then((res) => {\n          if (res.ok) return res.data;\n        })\n        .then((data) => {\n          return data;\n        });\n\n      setOptions([]);\n      // setOptions(data)\n    } catch (err) {\n      console.error(err);\n      message.error(\"Search Function will not work\");\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  const template = [\n    { exchange: \"NASDAQ\", symbol: \"AAPL\", fullName: \"Apple Inc.\" },\n  ];\n\n  const onSelect = (value) => {\n    window.location.href = \"/stocks/\" + value;\n  };\n\n  const filterOption = (input, option) => {\n    return (\n      option.symbol.toLowerCase().indexOf(input.toLowerCase()) >= 0 ||\n      option.fullName.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    );\n  };\n\n  const filterSort = (optionA, optionB) => {\n    const symbolCompare = optionA.symbol\n      .toLowerCase()\n      .localeCompare(optionB.symbol.toLowerCase());\n    if (symbolCompare !== 0) {\n      return symbolCompare;\n    }\n    return optionA.fullName\n      .toLowerCase()\n      .localeCompare(optionB.fullName.toLowerCase());\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div style={{ width: \"95%\", margin: \"auto\" }}>\n        <Row>\n          <Col xs={24} sm={24} md={6} lg={6} xl={5} xxl={4}>\n            <h1>\n              <Link to=\"/\" style={{ color: \"black\" }}>\n                Stocks\n              </Link>\n            </h1>{\" \"}\n            <small>{date}</small>\n          </Col>\n          <Col\n            xs={0}\n            sm={0}\n            md={18}\n            lg={18}\n            xl={19}\n            xxl={20}\n            style={{ textAlign: \"right\" }}\n          >\n            <Select\n              showSearch\n              defaultActiveFirstOption={false}\n              showArrow={false}\n              filterOption={filterOption}\n              filterSort={filterSort}\n              onSelect={onSelect}\n              notFoundContent={null}\n              placeholder=\"Search...\"\n              style={{ width: \"250px\", textAlign: \"left\" }}\n            >\n              {options.map((option) => (\n                <Option\n                  key={`${option.exchange}/${option.symbol}`}\n                  value={`${option.exchange}/${option.symbol}`}\n                >\n                  <span>{option.symbol}</span>\n                  <br />\n                  <small>{option.fullName}</small>\n                </Option>\n              ))}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}