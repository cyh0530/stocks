{"version":3,"sources":["utils/Constants.js","single/Single.js","main/Main.js","App.js","index.js"],"names":["appScriptURL","singleStockColumns","title","dataIndex","key","align","width","render","text","row","index","style","textAlign","action","color","currentDate","Date","current","date","predict","message","currentSpeed","currentSpeedPct","middleDate","middle","predictDate","currentPriceDiff","price","currentDateDiffMillis","currentDateDiff","Math","round","expectSpeed","expectSpeedPct","expectPriceDiff","expectDateDiffMillis","expectDateDiff","sorter","a","b","aMiddleDate","bMiddleDate","aPredictDate","bPredictDate","aCurrentPriceDiff","aCurrentDateDiffMillis","aCurrentDateDiff","aCurrentSpeedPct","aExpectPriceDiff","aExpectDateDiffMillis","aExpectDateDiff","aExpectSpeedPct","aSpeedPct","min","bCurrentPriceDiff","bCurrentDateDiffMillis","bDateDiff","bCurrentSpeedPct","bExpectPriceDiff","bExpectDateDiffMillis","bExpectDateDiff","bExpectSpeedPct","bSpeedPct","gain","percentage","start","difference","points","defaultSortOrder","tabName","new","hold","alert","temp","Single","useParams","country","symbol","useState","header","setHeader","oldDataSource","setOldDataSource","currentDataSource","setCurrentDataSource","setError","finishFetching","setFinishFetching","fetchData","axios","url","params","mode","toUpperCase","then","res","data","console","log","error","document","profile","fullName","old","accuracy","success","total","yahooLink","symbolTitle","count","onChange","onFavoriteChange","href","target","rel","icon","faExternalLinkAlt","toLocaleDateString","Item","label","useEffect","value","rawFavorite","localStorage","getItem","favorite","JSON","parse","exchangeList","symbolIndex","indexOf","splice","push","setItem","stringify","active","columns","dataSource","size","pagination","defaultPageSize","oldStockColumns","buy","sell","Main","stockData","tabPanes","setTabPanes","TabPane","Tabs","TPE","NASDAQ","NYSE","tabs","exchanges","subTabs","exchangesAllData","categories","firstData","Object","keys","category","categoryData","length","stock","subDataSource","defaultActiveKey","map","tab","subTab","index2","margin","bordered","hideOnSinglePage","expandable","expandedRowRender","expandRowByClick","scroll","x","record","i","processing","ellipsis","fixed","allData","differencePoint","differencePct","actionStyle","to","padEnd","maxSpeed","maxSpeedPct","speedPct","speed","aAllData","aMaxSpeedPct","priceDiff","dateDiffMillis","dateDiff","bAllData","bMaxSpeedPct","minPct","max","maxPct","pct","aMin","aMax","bMin","bMax","minDate","maxDate","Header","Option","Select","options","setOptions","fetchStockList","xs","sm","md","lg","xl","xxl","showSearch","defaultActiveFirstOption","showArrow","filterOption","input","option","toLowerCase","filterSort","optionA","optionB","symbolCompare","localeCompare","onSelect","window","location","notFoundContent","placeholder","App","setStockData","fetchTodayData","loading","content","duration","get","html","Map","viewport","querySelector","childNodes","forEach","node","set","id","sheetMenu","innerText","name","tableBody","minusIndex","tr","td","decode","parsedText","padding","basename","exact","path","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.1f6c703d.chunk.js","sourcesContent":["export const summaryLink =\r\n  \"https://docs.google.com/spreadsheets/u/1/d/e/2PACX-1vQGMwv4tEoSbTjgtSht6LZ5Vxlwb0Y4Lm1z5Pp0tuBcSaZE9AMTY_isyio7Sc-_C8LHsfv_xMptHeqA/pubhtml\";\r\n\r\nexport const appScriptURL =\r\n  \"https://script.google.com/a/uw.edu/macros/s/AKfycbzdeg0uAW8TFykGSnDPjMxYhAayyAfcQEnuByZm7ykEKiXJbdk/exec\";\r\n\r\nexport const MODE = {\r\n  color: [\r\n    {\r\n      rise: \"red\",\r\n      fall: \"green\",\r\n    },\r\n    { rise: \"green\", fall: \"red\" },\r\n  ],\r\n};\r\n\r\nexport const singleStockColumns = [\r\n  // {\r\n  //   title: \"買價\",\r\n  //   dataIndex: \"buy\",\r\n  //   key: \"buy\",\r\n  //   render: (text, row, index) => {\r\n  //     return (\r\n  //       <p style={{ textAlign: \"right\" }}>\r\n  //         <span>{row.buy.price}</span>\r\n  //         <br />\r\n  //         <small>{row.buy.date}</small>\r\n  //       </p>\r\n  //     );\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"行為\",\r\n    dataIndex: \"action\",\r\n    key: \"action\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      let style = { textAlign: \"right\" };\r\n      let action = text;\r\n      if (text === \"買\") {\r\n        style.color = \"red\";\r\n      } else if (text === \"賣\") {\r\n        style.color = \"green\";\r\n      }\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n      return (\r\n        <p style={style}>\r\n          {action}\r\n          <br />\r\n          {row.message}\r\n        </p>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"漲速(週)\",\r\n    dataIndex: \"speed\",\r\n    key: \"speed\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      const middleDate = new Date(row.middle.date);\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n\r\n      const currentPriceDiff = row.current.price - row.middle.price;\r\n      const currentDateDiffMillis = currentDate - middleDate;\r\n      const currentDateDiff = currentDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      let currentSpeed, currentSpeedPct;\r\n      if (currentDateDiff <= 0) {\r\n        currentSpeed = 0;\r\n        currentSpeedPct = 0;\r\n      } else {\r\n        currentSpeed =\r\n          Math.round((currentPriceDiff / ((currentDateDiff / 7) * 5)) * 100) /\r\n          100;\r\n        currentSpeedPct =\r\n          Math.round((currentSpeed / currentDateDiff) * 10000) / 100;\r\n      }\r\n\r\n      const expectPriceDiff = row.predict.price - row.middle.price;\r\n      const expectDateDiffMillis = predictDate - middleDate;\r\n      const expectDateDiff = expectDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      let expectSpeed, expectSpeedPct;\r\n      if (expectDateDiff <= 0) {\r\n        expectSpeed = 0;\r\n        expectSpeedPct = 0;\r\n      } else {\r\n        expectSpeed =\r\n          Math.round((expectPriceDiff / ((expectDateDiff / 7) * 5)) * 100) /\r\n          100;\r\n        expectSpeedPct =\r\n          Math.round((expectSpeed / expectDateDiff) * 10000) / 100;\r\n      }\r\n\r\n      let style = { textAlign: \"right\" };\r\n\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n\r\n      return (\r\n        <p style={style}>\r\n          {currentDateDiffMillis / expectDateDiffMillis >= 0.05 ? (\r\n            <>\r\n              實際: {currentSpeedPct}% <small>({currentSpeed})</small>\r\n              <br />\r\n            </>\r\n          ) : null}\r\n          預期: {expectSpeedPct}% <small>({expectSpeed})</small>\r\n        </p>\r\n      );\r\n    },\r\n    sorter: (a, b) => {\r\n      const currentDate = new Date(a.current.date);\r\n      const aMiddleDate = new Date(a.middle.date);\r\n      const bMiddleDate = new Date(b.middle.date);\r\n      const aPredictDate = new Date(a.predict.date);\r\n      const bPredictDate = new Date(b.predict.date);\r\n\r\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\r\n        return aPredictDate - bPredictDate;\r\n      } else if (aPredictDate <= currentDate) {\r\n        return -1;\r\n      } else if (bPredictDate <= currentDate) {\r\n        return 1;\r\n      }\r\n\r\n      const aCurrentPriceDiff = a.current.price - a.middle.price;\r\n      const aCurrentDateDiffMillis = currentDate - aMiddleDate;\r\n      const aCurrentDateDiff = aCurrentDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      const aCurrentSpeed =\r\n        Math.round((aCurrentPriceDiff / ((aCurrentDateDiff / 7) * 5)) * 100) /\r\n        100;\r\n      const aCurrentSpeedPct = aCurrentSpeed / aCurrentDateDiff;\r\n\r\n      const aExpectPriceDiff = a.predict.price - a.middle.price;\r\n      const aExpectDateDiffMillis = aPredictDate - aMiddleDate;\r\n      const aExpectDateDiff = aExpectDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      const aExpectSpeed =\r\n        Math.round((aExpectPriceDiff / ((aExpectDateDiff / 7) * 5)) * 100) /\r\n        100;\r\n      const aExpectSpeedPct = aExpectSpeed / aExpectDateDiff;\r\n\r\n      let aSpeedPct = aExpectSpeedPct;\r\n\r\n      if (aCurrentDateDiffMillis / aExpectDateDiffMillis >= 0.1) {\r\n        aSpeedPct = Math.min(aCurrentSpeedPct, aExpectSpeedPct);\r\n      }\r\n\r\n      const bCurrentPriceDiff = b.current.price - b.middle.price;\r\n      const bCurrentDateDiffMillis = currentDate - bMiddleDate;\r\n      const bDateDiff = bCurrentDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      const bCurrentSpeed =\r\n        Math.round((bCurrentPriceDiff / ((bDateDiff / 7) * 5)) * 100) / 100;\r\n      const bCurrentSpeedPct = bCurrentSpeed / bDateDiff;\r\n\r\n      const bExpectPriceDiff = b.predict.price - b.middle.price;\r\n      const bExpectDateDiffMillis = bPredictDate - bMiddleDate;\r\n      const bExpectDateDiff = bExpectDateDiffMillis / (1000 * 60 * 60 * 24);\r\n      const bExpectSpeed =\r\n        Math.round((bExpectPriceDiff / ((bExpectDateDiff / 7) * 5)) * 100) /\r\n        100;\r\n      const bExpectSpeedPct = bExpectSpeed / bExpectDateDiff;\r\n\r\n      let bSpeedPct = bExpectSpeedPct;\r\n\r\n      if (bCurrentDateDiffMillis / bExpectDateDiffMillis >= 0.1) {\r\n        bSpeedPct = Math.min(bCurrentSpeedPct, bExpectSpeedPct);\r\n      }\r\n\r\n      return aSpeedPct - bSpeedPct;\r\n    },\r\n  },\r\n  {\r\n    title: \"獲利空間\",\r\n    dataIndex: \"gain\",\r\n    key: \"gain\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      let style = { textAlign: \"right\" };\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n\r\n      return (\r\n        <p style={style}>\r\n          <span>{row.gain.price}</span>\r\n          <br />\r\n          <small>{row.gain.percentage}</small>\r\n        </p>\r\n      );\r\n    },\r\n    sorter: (a, b) => {\r\n      const currentDate = new Date(a.current.date);\r\n      const aPredictDate = new Date(a.predict.date);\r\n      const bPredictDate = new Date(b.predict.date);\r\n\r\n      if (aPredictDate <= currentDate && bPredictDate <= currentDate) {\r\n        return aPredictDate - bPredictDate;\r\n      } else if (aPredictDate <= currentDate) {\r\n        return -1;\r\n      } else if (bPredictDate <= currentDate) {\r\n        return 1;\r\n      }\r\n      return a.gain.price - b.gain.price;\r\n    },\r\n  },\r\n  {\r\n    title: \"起漲點\",\r\n    dataIndex: \"start\",\r\n    key: \"start\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      let style = { textAlign: \"right\" };\r\n\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n      return (\r\n        <p style={style}>\r\n          <span>{row.start.price}</span>\r\n          <br />\r\n          <small>{row.start.date}</small>\r\n        </p>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"中間值\",\r\n    dataIndex: \"middle\",\r\n    key: \"middle\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      let style = { textAlign: \"right\" };\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n      return (\r\n        <p style={style}>\r\n          <span>{row.middle.price}</span>\r\n          <br />\r\n          <small>\r\n            ({row.middle.difference.points}, {row.middle.difference.percentage}\r\n            %)\r\n          </small>\r\n          <br />\r\n          <small>{row.middle.date}</small>\r\n        </p>\r\n      );\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"現價\",\r\n  //   dataIndex: \"currentPrice\",\r\n  //   key: \"currentPrice\",\r\n  //   align: \"right\",\r\n  //   width: 100,\r\n  //   render: (text, row, index) => {\r\n  //     let style = {};\r\n  //     if (row.current.difference.points < 0) {\r\n  //       style.color = \"green\";\r\n  //     } else {\r\n  //       style.color = \"red\";\r\n  //     }\r\n  //     return (\r\n  //       <p style={{ textAlign: \"right\" }}>\r\n  //         <span style={style}>{row.current.price}</span>\r\n  //         <br />\r\n  //         <span>{row.current.difference.percentage}%</span>\r\n  //         <br />\r\n  //         <small>{row.current.date}</small>\r\n  //       </p>\r\n  //     );\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"現在獲利\",\r\n  //   dataIndex: \"currentGain\",\r\n  //   key: \"currentGain\",\r\n  //   render: (text, row, index) => {\r\n  //     let style = { textAlign: \"right\" };\r\n  //     if (row.current.price < row.buy.price) {\r\n  //       style.color = \"green\";\r\n  //     } else {\r\n  //       style.color = \"red\";\r\n  //     }\r\n  //     return (\r\n  //       <p style={style}>\r\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\r\n  //         <br />\r\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\r\n  //       </p>\r\n  //     );\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"目標價\",\r\n    dataIndex: \"predict\",\r\n    key: \"predict\",\r\n    align: \"right\",\r\n    width: 100,\r\n    defaultSortOrder: \"ascend\",\r\n    render: (text, row, index) => {\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      let style = {};\r\n      if (predictDate < currentDate) {\r\n        style.color = \"gray\";\r\n      }\r\n\r\n      return (\r\n        <p style={style}>\r\n          <span>{row.predict.price}</span>\r\n          <br />\r\n          <small>{row.predict.date}</small>\r\n        </p>\r\n      );\r\n    },\r\n    sorter: (a, b) => a.predict.price - b.predict.price,\r\n  },\r\n];\r\n\r\nexport const tabName = {\r\n  new: \"今日新增\",\r\n  hold: \"持有\",\r\n  alert: \"警戒\",\r\n  temp: \"觀察\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Rate, Table, message, Descriptions, Skeleton } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { singleStockColumns } from \"../utils/Constants\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { appScriptURL } from \"../utils/Constants\";\r\n\r\nexport default function Single() {\r\n  const { country, symbol } = useParams();\r\n  const [header, setHeader] = useState(false);\r\n  const [oldDataSource, setOldDataSource] = useState([]);\r\n  const [currentDataSource, setCurrentDataSource] = useState([]);\r\n  const [error, setError] = useState({});\r\n  const [finishFetching, setFinishFetching] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const data = await axios({\r\n        url: appScriptURL,\r\n        params: {\r\n          mode: \"single\",\r\n          country: country.toUpperCase(),\r\n          symbol: symbol.toUpperCase(),\r\n        },\r\n      }).then((res) => {\r\n        return res.data;\r\n      });\r\n\r\n      console.log(data);\r\n      if (data.error) {\r\n        console.error(data.error);\r\n        // message.error(\"Something went wrong. Please try again later\");\r\n        setError({\r\n          error: (\r\n            <div>\r\n              <h2>Sorry, we don't have this stock in our database.</h2>\r\n              <h2>Please try other stocks.</h2>\r\n            </div>\r\n          ),\r\n        });\r\n        return;\r\n      }\r\n\r\n      document.title = `${symbol} - ${data.profile.fullName} | Stocks`;\r\n      setOldDataSource(data.data.old);\r\n      setCurrentDataSource(data.data.current);\r\n      const profile = data.profile;\r\n\r\n      const profileTemplate = {\r\n        profile: {\r\n          fullName: \"\",\r\n          accuracy: {\r\n            success: 0,\r\n            total: 0,\r\n            percentage: \"\",\r\n          },\r\n          price: 0,\r\n          date: new Date(),\r\n          difference: {\r\n            points: 0,\r\n            percentage: 0,\r\n          },\r\n          // action: \"\",\r\n          // status: \"\",\r\n        },\r\n        data: {\r\n          old: [],\r\n          current: [],\r\n        },\r\n      };\r\n\r\n      let price;\r\n\r\n      if (profile.difference.points < 0) {\r\n        price = (\r\n          <span style={{ color: \"green\" }}>\r\n            {profile.price} {\"  \"} {profile.difference.points} (\r\n            {profile.difference.percentage}%)\r\n          </span>\r\n        );\r\n      } else if (profile.difference.points > 0) {\r\n        price = (\r\n          <span style={{ color: \"red\" }}>\r\n            {profile.price} {\"  \"} +{profile.difference.points} (+\r\n            {profile.difference.percentage}%)\r\n          </span>\r\n        );\r\n      } else {\r\n        price = (\r\n          <span>\r\n            {profile.price}\r\n            {\"  \"} +{profile.difference.points} (+\r\n            {profile.difference.percentage}%)\r\n          </span>\r\n        );\r\n      }\r\n\r\n      let yahooLink;\r\n      if (country !== \"US\") {\r\n        yahooLink = `https://finance.yahoo.com/chart/${symbol}.${country}`;\r\n      } else {\r\n        yahooLink = `https://finance.yahoo.com/chart/${symbol}`;\r\n      }\r\n\r\n      const symbolTitle = (\r\n        <>\r\n          {profile.fullName} ({symbol}){\" \"}\r\n          <Rate count={1} onChange={onFavoriteChange} />{\" \"}\r\n          <a href={yahooLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n            Yahoo Finance <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n          </a>\r\n          <br />\r\n          {price}\r\n          <br />\r\n          <small>{new Date(profile.date).toLocaleDateString()}</small>\r\n        </>\r\n      );\r\n      setHeader(\r\n        <div>\r\n          <Descriptions title={symbolTitle}>\r\n            <Descriptions.Item label=\"準確率\">\r\n              {profile.accuracy.percentage}% ({profile.accuracy.success} /{\" \"}\r\n              {profile.accuracy.total})\r\n            </Descriptions.Item>\r\n            {/* <Descriptions.Item label=\"策略\">買/賣</Descriptions.Item>\r\n        <Descriptions.Item label=\"股價狀態\">漲/跌</Descriptions.Item> */}\r\n          </Descriptions>\r\n        </div>\r\n      );\r\n      setFinishFetching(true)\r\n    } catch (e) {\r\n      console.error(e);\r\n      message.error(\"Unable to fetch data. Please try again later.\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [country, symbol]);\r\n\r\n  const onFavoriteChange = (value) => {\r\n    const rawFavorite = localStorage.getItem(\"favorite\");\r\n    const favorite = rawFavorite ? JSON.parse(rawFavorite) : {};\r\n    const exchangeList = favorite || [];\r\n\r\n    if (value === 0) {\r\n      const symbolIndex = exchangeList.indexOf(symbol);\r\n      if (symbolIndex > -1) {\r\n        exchangeList.splice(symbolIndex, 1);\r\n      }\r\n    } else {\r\n      exchangeList.push(symbol);\r\n    }\r\n    localStorage.setItem(\"favorite\", JSON.stringify(favorite));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {finishFetching ? header : <Skeleton active />}\r\n      {finishFetching ? (\r\n        <div>\r\n          <Table\r\n            columns={singleStockColumns}\r\n            dataSource={currentDataSource}\r\n            size=\"small\"\r\n            pagination={{ defaultPageSize: 5 }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Skeleton active />\r\n      )}\r\n      {finishFetching ? (\r\n        <div>\r\n          <h3>過往紀錄</h3>\r\n          <Table\r\n            columns={oldStockColumns}\r\n            dataSource={oldDataSource}\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Skeleton active />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst oldStockColumns = [\r\n  { title: \"訊息\", dataIndex: \"message\", key: \"message\", width: 100 },\r\n  {\r\n    title: \"獲利\",\r\n    dataIndex: \"gain\",\r\n    key: \"gain\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      let style = { textAlign: \"right\" };\r\n      if (row.success) {\r\n        style.color = \"red\";\r\n      } else {\r\n        style.color = \"green\";\r\n      }\r\n      return (\r\n        <span style={style}>\r\n          <span>\r\n            {row.gain.price > 0 ? \"+\" : \"\"}\r\n            {row.gain.price}\r\n          </span>\r\n          <br />\r\n          <small>\r\n            {row.gain.price > 0 ? \"+\" : \"\"}\r\n            {row.gain.percentage}\r\n          </small>\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"買點\",\r\n    dataIndex: \"buy\",\r\n    key: \"buy\",\r\n    align: \"right\",\r\n    width: 100,\r\n    defaultSortOrder: \"descend\",\r\n    render: (text, row, index) => {\r\n      return (\r\n        <span style={{ textAlign: \"right\" }}>\r\n          <span>{row.buy.price}</span>\r\n          <br />\r\n          <small>{row.buy.date}</small>\r\n        </span>\r\n      );\r\n    },\r\n    sorter: (a, b) => {\r\n      const aDate = new Date(a.buy.date);\r\n      const bDate = new Date(b.buy.date);\r\n      return aDate - bDate;\r\n    },\r\n  },\r\n  {\r\n    title: \"賣點\",\r\n    dataIndex: \"sell\",\r\n    key: \"sell\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      return (\r\n        <span style={{ textAlign: \"right\" }}>\r\n          <span>{row.sell.price}</span>\r\n          <br />\r\n          <small>{row.sell.date}</small>\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"起漲點\",\r\n    dataIndex: \"start\",\r\n    key: \"start\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      return (\r\n        <span style={{ textAlign: \"right\" }}>\r\n          <span>{row.start.price}</span>\r\n          <br />\r\n          <small>{row.start.date}</small>\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"中間值\",\r\n    dataIndex: \"middle\",\r\n    key: \"middle\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      return (\r\n        <span style={{ textAlign: \"right\" }}>\r\n          <span>{row.middle.price}</span>\r\n          <br />\r\n          <span>{row.middle.difference.percentage}%</span>\r\n          <br />\r\n          <small>{row.middle.date}</small>\r\n        </span>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    title: \"目標價\",\r\n    dataIndex: \"predict\",\r\n    key: \"predict\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      const currentDate = new Date(row.current.date);\r\n      const predictDate = new Date(row.predict.date);\r\n      let style = {};\r\n      if (predictDate < currentDate) {\r\n        style.color = \"red\";\r\n      }\r\n      return (\r\n        <span style={{ textAlign: \"right\" }}>\r\n          <span>{row.predict.price}</span>\r\n          <br />\r\n          <small style={style}>{row.predict.date}</small>\r\n        </span>\r\n      );\r\n    },\r\n    sorter: (a, b) => a.predict.price - b.predict.price,\r\n  },\r\n];\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst templateOldStockData = {\r\n  signal: \"change hand\",\r\n  action: \"buy\",\r\n  gain: {\r\n    price: 0,\r\n    percentage: \"%\",\r\n    speed: { speed: \"\", percentage: \"\" },\r\n  },\r\n  start: {\r\n    date: \"\",\r\n    price: 0,\r\n    index: 0,\r\n  },\r\n  middle: {\r\n    date: \"8/11/2020\",\r\n    price: 35.75,\r\n    percentage: \"0.86\",\r\n    index: 3582,\r\n  },\r\n  current: {\r\n    date: \"1/15/2021\",\r\n    price: 40.1,\r\n    difference: {\r\n      points: \"-0.85\",\r\n      percentage: \"-2.08\",\r\n    },\r\n    index: 3691,\r\n  },\r\n  predict: {\r\n    date: \"1/5/2021\",\r\n    price: 51.6,\r\n  },\r\n  buy: {\r\n    date: \"1/15/2021\",\r\n    price: 40.1,\r\n    difference: {\r\n      points: \"-0.85\",\r\n      percentage: \"-2.08\",\r\n    },\r\n    index: 3691,\r\n  },\r\n  sell: {\r\n    date: \"1/15/2021\",\r\n    price: 40.1,\r\n    difference: {\r\n      points: \"-0.85\",\r\n      percentage: \"-2.08\",\r\n    },\r\n    index: 3691,\r\n  },\r\n  success: true / false,\r\n  index: 3582,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Tabs } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { singleStockColumns, tabName } from \"../utils/Constants\";\r\n\r\nexport default function Main({ stockData }) {\r\n  const [tabPanes, setTabPanes] = useState([]);\r\n  const { TabPane } = Tabs;\r\n\r\n  const temp = {\r\n    TPE: \"TW\",\r\n    NASDAQ: \"US\",\r\n    NYSE: \"US\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    // parse raw data to website required format\r\n    const tabs = [];\r\n    for (let exchanges in stockData) {\r\n      const subTabs = [];\r\n      const exchangesAllData = stockData[exchanges];\r\n      let categories = {};\r\n      const firstKey = Object.keys(exchangesAllData)[0];\r\n      const firstData = exchangesAllData[firstKey].data;\r\n      for (let key in firstData) {\r\n        categories[key] = [];\r\n      }\r\n\r\n      for (let symbol in exchangesAllData) {\r\n        const fullName = exchangesAllData[symbol].fullName;\r\n        const stockData = exchangesAllData[symbol].data;\r\n\r\n        for (let category in stockData) {\r\n          const categoryData = stockData[category];\r\n          if (categoryData.length > 0) {\r\n            categories[category].push({\r\n              key: categories[category].length,\r\n              country: temp[exchanges],\r\n              stock: symbol,\r\n              fullName,\r\n              subDataSource: categoryData,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let category in categories) {\r\n        subTabs.push({\r\n          tabName: tabName[category] || category,\r\n          dataSource: categories[category],\r\n        });\r\n      }\r\n\r\n      tabs.push({\r\n        exchanges,\r\n        subTabs,\r\n      });\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const templateTab = [\r\n      {\r\n        exchanges: \"TPE\",\r\n        subTabs: [\r\n          {\r\n            tabName: \"Today New\",\r\n            dataSource: [\r\n              {\r\n                key: 1,\r\n                exchanges: \"TPE\",\r\n                stock: \"2330\",\r\n                fullName: \"台積電\",\r\n                subDataSource: [\r\n                  {\r\n                    key: 1,\r\n                    start: {},\r\n                    middle: {},\r\n                    current: {},\r\n                    predict: {},\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n    setTabPanes(tabs);\r\n  }, [stockData]);\r\n\r\n  return (\r\n    <Tabs defaultActiveKey=\"0\">\r\n      {tabPanes.map((tab, index) => (\r\n        <TabPane tab={tab.exchanges} key={index}>\r\n          <Tabs defaultActiveKey=\"0\">\r\n            {tab.subTabs.map((subTab, index2) => (\r\n              <TabPane tab={subTab.tabName} key={index2}>\r\n                <div style={{ margin: \"auto\" }}>\r\n                  <Table\r\n                    key={index2}\r\n                    size=\"small\"\r\n                    columns={columns}\r\n                    bordered\r\n                    dataSource={subTab.dataSource}\r\n                    pagination={{ defaultPageSize: 20, hideOnSinglePage: true }}\r\n                    expandable={{ expandedRowRender, expandRowByClick: true }}\r\n                    scroll={{ x: 600 }}\r\n                  />\r\n                </div>\r\n              </TabPane>\r\n            ))}\r\n          </Tabs>\r\n        </TabPane>\r\n      ))}\r\n      {/* <TabPane tab=\"Favorite\" key=\"1\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={dataSource}\r\n            expandable={{ expandedRowRender }}\r\n          />\r\n        </TabPane> */}\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nconst expandedRowRender = (record) => {\r\n  let dataSource = [];\r\n  // for (let stock in raw) {\r\n  //   for (let i = 0; i < raw[stock].hold.length; i++) {\r\n  //     const processing = raw[stock].hold[i];\r\n  //     dataSource.push({\r\n  //       key: key++,\r\n  //       stock: stock,\r\n  //       buy: {\r\n  //         price: 0,\r\n  //         date: \"12/12/2020\",\r\n  //       },\r\n  //       ...processing,\r\n  //     });\r\n  //   }\r\n  // }\r\n  for (let i = 0; i < record.subDataSource.length; i++) {\r\n    const processing = record.subDataSource[i];\r\n    dataSource.push({\r\n      key: i,\r\n      stock: record.stock,\r\n      buy: {\r\n        price: 0,\r\n        date: \"12/12/2020\",\r\n      },\r\n      ...processing,\r\n    });\r\n  }\r\n  console.log(dataSource);\r\n  return (\r\n    <div style={{ margin: \"10px 0px\" }}>\r\n      <Table\r\n        size=\"small\"\r\n        columns={singleStockColumns}\r\n        dataSource={dataSource}\r\n        bordered\r\n        pagination={{ defaultPageSize: 20, hideOnSinglePage: true }}\r\n        scroll={{ x: 600 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: \"股票\",\r\n    dataIndex: \"stock\",\r\n    key: \"stock\",\r\n    ellipsis: true,\r\n    width: 100,\r\n    fixed: \"left\",\r\n    render: (text, row, index) => {\r\n      const allData = row.subDataSource;\r\n\r\n      let style = {};\r\n\r\n      let fullName = row.fullName;\r\n      // if (fullName.length > 25) {\r\n      //   fullName = fullName.substring(0, 25) + \"...\";\r\n      // }\r\n      let differencePoint = allData[0].current.difference.points;\r\n      let differencePct = allData[0].current.difference.percentage + \"%\";\r\n\r\n      if (differencePoint > 0) {\r\n        style.color = \"red\";\r\n      }\r\n\r\n      if (differencePoint >= 0) {\r\n        differencePoint = `+${differencePoint}`;\r\n        differencePct = `+${differencePct}`;\r\n      } else if (differencePoint < 0) {\r\n        style.color = \"green\";\r\n      }\r\n      let action = \"買\";\r\n      let actionStyle = { color: \"red\" };\r\n\r\n      for (let data of allData) {\r\n        if (data.action === \"賣\") {\r\n          action = \"賣\";\r\n          actionStyle.color = \"green\";\r\n          break;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <span>\r\n          <Link to={`/${row.country}/${row.stock}`}>\r\n            {text.padEnd(6)} <br />\r\n            {fullName}\r\n          </Link>\r\n          <br />\r\n          <span style={style}>\r\n            ${allData[0].current.price} ({differencePoint}, {differencePct})\r\n            <br />\r\n          </span>\r\n          <span style={actionStyle}>{action}</span>\r\n        </span>\r\n      );\r\n    },\r\n    sorter: (a, b) => a.stock - b.stock,\r\n  },\r\n  {\r\n    title: \"最大漲速(週)\",\r\n    dataIndex: \"speed\",\r\n    key: \"speed\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      const allData = row.subDataSource;\r\n      let maxSpeed = 0,\r\n        maxSpeedPct = 0;\r\n      for (let data of allData) {\r\n\r\n        const middleDate = new Date(data.middle.date);\r\n        const currentDate = new Date(data.current.date);\r\n        const predictDate = new Date(data.predict.date);\r\n\r\n        const currentPriceDiff = data.current.price - data.middle.price;\r\n        const currentDateDiffMillis = currentDate - middleDate;\r\n        const currentDateDiff = currentDateDiffMillis / (1000 * 60 * 60 * 24);\r\n        let currentSpeed, currentSpeedPct;\r\n        if (currentDateDiff <= 0) {\r\n          currentSpeed = 0;\r\n          currentSpeedPct = 0;\r\n        } else {\r\n          currentSpeed =\r\n            Math.round((currentPriceDiff / ((currentDateDiff / 7) * 5)) * 100) /\r\n            100;\r\n          currentSpeedPct =\r\n            Math.round((currentSpeed / currentDateDiff) * 10000) / 100;\r\n        }\r\n\r\n        const expectPriceDiff = data.predict.price - data.middle.price;\r\n        const expectDateDiffMillis = predictDate - middleDate;\r\n        const expectDateDiff = expectDateDiffMillis / (1000 * 60 * 60 * 24);\r\n        let expectSpeed, expectSpeedPct;\r\n        if (expectDateDiff <= 0) {\r\n          expectSpeed = 0;\r\n          expectSpeedPct = 0;\r\n        } else {\r\n          expectSpeed =\r\n            Math.round((expectPriceDiff / ((expectDateDiff / 7) * 5)) * 100) /\r\n            100;\r\n          expectSpeedPct =\r\n            Math.round((expectSpeed / expectDateDiff) * 10000) / 100;\r\n        }\r\n\r\n        let speedPct = expectSpeedPct;\r\n        let speed = expectSpeed;\r\n\r\n        if (currentDateDiffMillis / expectDateDiffMillis >= 0.1) {\r\n          if (currentSpeedPct < expectSpeedPct) {\r\n            speedPct = currentSpeedPct;\r\n            speed = speedPct;\r\n          }\r\n        }\r\n\r\n        if (speedPct > maxSpeedPct) {\r\n          maxSpeedPct = speedPct;\r\n          maxSpeed = speed;\r\n        }\r\n      }\r\n\r\n      return (\r\n        <span>\r\n          <span>{maxSpeedPct}%</span>\r\n          <br />\r\n          <small>{maxSpeed}</small>\r\n        </span>\r\n      );\r\n    },\r\n    defaultSortOrder: \"descend\",\r\n    sorter: (a, b) => {\r\n      // sort by max speed\r\n      const aAllData = a.subDataSource;\r\n\r\n      let aMaxSpeedPct = 0;\r\n      for (let data of aAllData) {\r\n        const priceDiff = data.predict.price - data.current.price;\r\n        const dateDiffMillis =\r\n          new Date(data.predict.date) - new Date(data.current.date);\r\n        if (dateDiffMillis <= 0) continue;\r\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\r\n        const speed = priceDiff / ((dateDiff / 7) * 5);\r\n        const speedPct = speed / dateDiff;\r\n\r\n        if (speedPct > aMaxSpeedPct) {\r\n          aMaxSpeedPct = speedPct;\r\n        }\r\n      }\r\n      const bAllData = b.subDataSource;\r\n\r\n      let bMaxSpeedPct = 0;\r\n      for (let data of bAllData) {\r\n        const priceDiff = data.predict.price - data.current.price;\r\n        const dateDiffMillis =\r\n          new Date(data.predict.date) - new Date(data.current.date);\r\n        if (dateDiffMillis <= 0) continue;\r\n\r\n        const dateDiff = dateDiffMillis / (1000 * 60 * 60 * 24);\r\n        const speed = priceDiff / ((dateDiff / 7) * 5);\r\n        const speedPct = speed / dateDiff;\r\n\r\n        if (speedPct > bMaxSpeedPct) {\r\n          bMaxSpeedPct = speedPct;\r\n        }\r\n      }\r\n\r\n      return aMaxSpeedPct - bMaxSpeedPct;\r\n    },\r\n  },\r\n  {\r\n    title: \"獲利空間\",\r\n    dataIndex: \"gain\",\r\n    key: \"gain\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      const allData = row.subDataSource;\r\n      let min = allData[0].gain.price;\r\n      let minPct = allData[0].gain.percentage;\r\n      let max = allData[0].gain.price;\r\n      let maxPct = allData[0].gain.percentage;\r\n      for (let data of allData) {\r\n        if (data.gain.price < min) {\r\n          min = data.gain.price;\r\n          minPct = data.gain.percentage;\r\n        }\r\n        if (data.gain.price > max) {\r\n          max = data.gain.price;\r\n          maxPct = data.gain.percentage;\r\n        }\r\n      }\r\n\r\n      const price = min === max ? min : `${min} - ${max}`;\r\n      const pct = minPct === maxPct ? minPct : `${minPct} - ${maxPct}`;\r\n      return (\r\n        <span>\r\n          <span>{price} </span>\r\n          <br />\r\n          <small>{pct} </small>\r\n        </span>\r\n      );\r\n    },\r\n    sorter: (a, b) => {\r\n      // sort by max profit gain\r\n      const aAllData = a.subDataSource;\r\n      let aMin = aAllData[0].gain.price;\r\n      let aMax = aAllData[0].gain.price;\r\n      const currentDate = new Date(aAllData[0].current.date);\r\n\r\n      for (let data of aAllData) {\r\n        const dataPredictDate = new Date(data.predict.date);\r\n        if (dataPredictDate <= currentDate) continue;\r\n        aMin = Math.min(data.gain.price, aMin);\r\n        aMax = Math.max(data.gain.price, aMax);\r\n      }\r\n\r\n      const bAllData = b.subDataSource;\r\n      let bMin = bAllData[0].gain.price;\r\n      let bMax = bAllData[0].gain.price;\r\n      for (let data of bAllData) {\r\n        const dataPredictDate = new Date(data.predict.date);\r\n        if (dataPredictDate <= currentDate) continue;\r\n        bMin = Math.min(data.gain.price, bMin);\r\n        bMax = Math.max(data.gain.price, bMax);\r\n      }\r\n\r\n      return aMax - bMax;\r\n    },\r\n  },\r\n  // {\r\n  //   title: \"現價\",\r\n  //   dataIndex: \"currentPrice\",\r\n  //   key: \"currentPrice\",\r\n  //   align: \"right\",\r\n\r\n  //   render: (text, row, index) => {\r\n  //     let style = { textAlign: \"right\" };\r\n  //     // if (row.current.price < row.buy.price) {\r\n  //     //   style.color = \"green\";\r\n  //     // } else {\r\n  //     //   style.color = \"red\";\r\n  //     // }\r\n  //     const allData = row.subDataSource;\r\n\r\n  //     return (\r\n  //       <span>\r\n  //         <span style={style}>{allData[0].current.price} </span>\r\n  //       </span>\r\n  //     );\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"買價\",\r\n  //   dataIndex: \"buy\",\r\n  //   key: \"buy\",\r\n  //   render: (text, row, index) => {\r\n  //     return (\r\n  //       <span style={{ textAlign: \"right\" }}>\r\n  //         <span>{row.buy.price}</span>\r\n  //         <br />\r\n  //         <small>{row.buy.date}</small>\r\n  //       </span>\r\n  //     );\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"起漲點\",\r\n  //   dataIndex: \"start\",\r\n  //   key: \"start\",\r\n  //   render: (text, row, index) => {\r\n  //     return (\r\n  //       <span style={{ textAlign: \"right\" }}>\r\n  //         <span>{row.start.price}</span>\r\n  //         <br />\r\n  //         <small>{row.start.date}</small>\r\n  //       </span>\r\n  //     );\r\n  //   },\r\n  // },\r\n  // {\r\n  //   title: \"現在獲利\",\r\n  //   dataIndex: \"currentGain\",\r\n  //   key: \"currentGain\",\r\n  //   render: (text, row, index) => {\r\n  //     let style = { textAlign: \"right\" };\r\n  //     if (row.current.price < row.buy.price) {\r\n  //       style.color = \"green\";\r\n  //     } else {\r\n  //       style.color = \"red\";\r\n  //     }\r\n  //     return (\r\n  //       <span style={style}>\r\n  //         <span>{(row.current.price - row.buy.price).toFixed(2)}</span>\r\n  //         <br />\r\n  //         <small>{(row.current.price / row.buy.price).toFixed(2)}%</small>\r\n  //       </span>\r\n  //     );\r\n  //   },\r\n  // },\r\n  {\r\n    title: \"目標價\",\r\n    dataIndex: \"predict\",\r\n    key: \"predict\",\r\n    align: \"right\",\r\n    width: 100,\r\n    render: (text, row, index) => {\r\n      const allData = row.subDataSource;\r\n      let min = allData[0].predict.price;\r\n      let minDate = allData[0].predict.date;\r\n      let max = allData[0].predict.price;\r\n      let maxDate = allData[0].predict.date;\r\n      for (let data of allData) {\r\n        if (data.predict.price < min) {\r\n          min = data.predict.price;\r\n          minDate = data.predict.date;\r\n        }\r\n        if (data.predict.price > max) {\r\n          max = data.predict.price;\r\n          maxDate = data.predict.date;\r\n        }\r\n      }\r\n      const price = min === max ? min : `${min} - ${max}`;\r\n      const date = min === max ? minDate : `${minDate} - ${maxDate}`;\r\n      return (\r\n        <span>\r\n          <span>{price} </span>\r\n          <br />\r\n          <small>{date} </small>\r\n        </span>\r\n      );\r\n    },\r\n  } /*\r\n    {\r\n      title: \"最高目標價\",\r\n      dataIndex: \"maxPredict\",\r\n      key: \"maxPredict\",\r\n      render: (text, row, index) => {\r\n        const allData = row.subDataSource;\r\n        let max = allData[0].predict.price;\r\n        let maxDate = allData[0].predict.date;\r\n        for (let data of allData) {\r\n          if (data.predict.price > max) {\r\n            max = data.predict.price;\r\n            maxDate = data.predict.date;\r\n          }\r\n        }\r\n        return (\r\n          <span style={{ textAlign: \"right\" }}>\r\n            <span>{max}</span>\r\n            <br />\r\n            <small>{maxDate}</small>\r\n          </span>\r\n        );\r\n      },\r\n      sorter: (a, b) => a.predict.price - b.predict.price,\r\n    },*/,\r\n];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Select, Row, Col, message } from \"antd\";\r\nimport { HashRouter, Switch, Route, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { parse } from \"node-html-parser\";\r\nimport { decode } from \"html-entities\";\r\nimport Single from \"./single/Single\";\r\nimport Main from \"./main/Main\";\r\nimport { appScriptURL, summaryLink } from \"./utils/Constants\";\r\n\r\nfunction App() {\r\n  const [stockData, setStockData] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchTodayData();\r\n  }, []);\r\n\r\n  const fetchTodayData = async () => {\r\n    try {\r\n      message.loading({ content: \"Loading...\", key: \"loading\", duration: 0 });\r\n      const res = await axios\r\n        .get(summaryLink)\r\n        .then((res) => {\r\n          return res.data;\r\n        })\r\n        .then((res) => {\r\n          return res;\r\n        });\r\n\r\n      const html = parse(res);\r\n      const tabs = new Map();\r\n\r\n      const viewport = html.querySelector(\"#sheets-viewport\");\r\n      viewport.childNodes.forEach((node) => {\r\n        tabs.set(node.id, { id: node.id, key: node.id });\r\n      });\r\n\r\n      const sheetMenu = html.querySelector(\"#sheet-menu\");\r\n      tabs.forEach((value, id) => {\r\n        const tabName = sheetMenu.querySelector(`#sheet-button-${id}`)\r\n          .childNodes[0].innerText;\r\n        tabs.set(id, {\r\n          ...tabs.get(id),\r\n          name: tabName,\r\n        });\r\n      });\r\n      let data = {};\r\n\r\n      tabs.forEach((value, id) => {\r\n        const tableBody = viewport.querySelector(`#${id} table tbody`);\r\n\r\n        let minusIndex = 1;\r\n\r\n        while (tableBody.childNodes.length - minusIndex > 1) {\r\n          const tr =\r\n            tableBody.childNodes[tableBody.childNodes.length - minusIndex];\r\n          // date = tr.childNodes[1].innerText;\r\n          let index = 2;\r\n          for (index = 2; index < tr.childNodes.length; index++) {\r\n            const td = tr.childNodes[index];\r\n            const text = decode(td.innerText);\r\n            if (text === \"\") break;\r\n            const parsedText = JSON.parse(text);\r\n            data[value.name] = { ...data[value.name], ...parsedText };\r\n          }\r\n          if (index > 2) break;\r\n\r\n          minusIndex++;\r\n        }\r\n      });\r\n\r\n      setStockData(data);\r\n      message.success({\r\n        content: \"Finish loading\",\r\n        key: \"loading\",\r\n        duration: 0.5,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      message.error(\"Something went wrong. Please try again later\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 10 }}>\r\n      <HashRouter basename=\"/stocks\">\r\n        <Header></Header>\r\n        <div style={{ width: \"95%\", margin: \"auto\" }}>\r\n          <Switch>\r\n            <Route exact path=\"/:country/:symbol\" component={Single} />\r\n            <Route exact path=\"/\">\r\n              <Main stockData={stockData} />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Header = () => {\r\n  const { Option } = Select;\r\n  const [options, setOptions] = useState([]);\r\n  useEffect(() => {\r\n    fetchStockList();\r\n  }, []);\r\n\r\n  const fetchStockList = async () => {\r\n    try {\r\n      const data = await axios({\r\n        url: appScriptURL,\r\n        params: { mode: \"stock-list\" },\r\n      }).then((res) => {\r\n        return res.data;\r\n      });\r\n\r\n      setOptions(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n      message.error(\"Search Function will not work\");\r\n    }\r\n  };\r\n  // eslint-disable-next-line no-unused-vars\r\n  const template = [\r\n    { exchange: \"NASDAQ\", symbol: \"AAPL\", fullName: \"Apple Inc.\" },\r\n  ];\r\n\r\n  const onSelect = (value) => {\r\n    window.location.href = \"/stocks/\" + value;\r\n  };\r\n\r\n  const filterOption = (input, option) => {\r\n    return (\r\n      option.symbol.toLowerCase().indexOf(input.toLowerCase()) >= 0 ||\r\n      option.fullName.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n    );\r\n  };\r\n\r\n  const filterSort = (optionA, optionB) => {\r\n    const symbolCompare = optionA.symbol\r\n      .toLowerCase()\r\n      .localeCompare(optionB.symbol.toLowerCase());\r\n    if (symbolCompare !== 0) {\r\n      return symbolCompare;\r\n    }\r\n    return optionA.fullName\r\n      .toLowerCase()\r\n      .localeCompare(optionB.fullName.toLowerCase());\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <div style={{ width: \"95%\", margin: \"auto\" }}>\r\n        <Row>\r\n          <Col xs={8} sm={8} md={6} lg={6} xl={5} xxl={4}>\r\n            <h1>\r\n              <Link to=\"/\" style={{ color: \"black\" }}>\r\n                Stocks\r\n              </Link>\r\n            </h1>\r\n          </Col>\r\n          <Col\r\n            xs={16}\r\n            sm={16}\r\n            md={18}\r\n            lg={18}\r\n            xl={19}\r\n            xxl={20}\r\n            style={{ textAlign: \"right\" }}\r\n          >\r\n            <Select\r\n              showSearch\r\n              defaultActiveFirstOption={false}\r\n              showArrow={false}\r\n              filterOption={filterOption}\r\n              filterSort={filterSort}\r\n              onSelect={onSelect}\r\n              notFoundContent={null}\r\n              placeholder=\"Search...\"\r\n              style={{ width: \"250px\", textAlign: \"left\" }}\r\n            >\r\n              {options.map((option) => (\r\n                <Option\r\n                  key={`${option.country}/${option.symbol}`}\r\n                  value={`${option.country}/${option.symbol}`}\r\n                  symbol={option.symbol}\r\n                  fullName={option.fullName}\r\n                >\r\n                  <span>{option.symbol}</span>\r\n                  <br />\r\n                  <small>{option.fullName}</small>\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}